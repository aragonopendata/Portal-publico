/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package es.aragon.base.migration.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;

import es.aragon.base.migration.model.ContentRelated;
import es.aragon.base.migration.model.ContentRelatedModel;
import es.aragon.base.migration.model.ContentRelatedSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the ContentRelated service. Represents a row in the &quot;EAB_MG_ContentRelated&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link ContentRelatedModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link ContentRelatedImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see ContentRelatedImpl
 * @see ContentRelated
 * @see ContentRelatedModel
 * @generated
 */
@JSON(strict = true)
@ProviderType
public class ContentRelatedModelImpl extends BaseModelImpl<ContentRelated>
	implements ContentRelatedModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a content related model instance should use the {@link ContentRelated} interface instead.
	 */
	public static final String TABLE_NAME = "EAB_MG_ContentRelated";
	public static final Object[][] TABLE_COLUMNS = {
			{ "uuid_", Types.VARCHAR },
			{ "contentRelatedId", Types.BIGINT },
			{ "contentParentId", Types.BIGINT },
			{ "contentLinkedId", Types.BIGINT },
			{ "url", Types.VARCHAR }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("contentRelatedId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("contentParentId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("contentLinkedId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("url", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE = "create table EAB_MG_ContentRelated (uuid_ VARCHAR(75) null,contentRelatedId LONG not null primary key,contentParentId LONG,contentLinkedId LONG,url STRING null)";
	public static final String TABLE_SQL_DROP = "drop table EAB_MG_ContentRelated";
	public static final String ORDER_BY_JPQL = " ORDER BY contentRelated.contentRelatedId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY EAB_MG_ContentRelated.contentRelatedId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(es.aragon.base.migration.service.util.ServiceProps.get(
				"value.object.entity.cache.enabled.es.aragon.base.migration.model.ContentRelated"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(es.aragon.base.migration.service.util.ServiceProps.get(
				"value.object.finder.cache.enabled.es.aragon.base.migration.model.ContentRelated"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(es.aragon.base.migration.service.util.ServiceProps.get(
				"value.object.column.bitmask.enabled.es.aragon.base.migration.model.ContentRelated"),
			true);
	public static final long CONTENTPARENTID_COLUMN_BITMASK = 1L;
	public static final long UUID_COLUMN_BITMASK = 2L;
	public static final long CONTENTRELATEDID_COLUMN_BITMASK = 4L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static ContentRelated toModel(ContentRelatedSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		ContentRelated model = new ContentRelatedImpl();

		model.setUuid(soapModel.getUuid());
		model.setContentRelatedId(soapModel.getContentRelatedId());
		model.setContentParentId(soapModel.getContentParentId());
		model.setContentLinkedId(soapModel.getContentLinkedId());
		model.setUrl(soapModel.getUrl());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<ContentRelated> toModels(ContentRelatedSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<ContentRelated> models = new ArrayList<ContentRelated>(soapModels.length);

		for (ContentRelatedSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(es.aragon.base.migration.service.util.ServiceProps.get(
				"lock.expiration.time.es.aragon.base.migration.model.ContentRelated"));

	public ContentRelatedModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _contentRelatedId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setContentRelatedId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _contentRelatedId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return ContentRelated.class;
	}

	@Override
	public String getModelClassName() {
		return ContentRelated.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("uuid", getUuid());
		attributes.put("contentRelatedId", getContentRelatedId());
		attributes.put("contentParentId", getContentParentId());
		attributes.put("contentLinkedId", getContentLinkedId());
		attributes.put("url", getUrl());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		String uuid = (String)attributes.get("uuid");

		if (uuid != null) {
			setUuid(uuid);
		}

		Long contentRelatedId = (Long)attributes.get("contentRelatedId");

		if (contentRelatedId != null) {
			setContentRelatedId(contentRelatedId);
		}

		Long contentParentId = (Long)attributes.get("contentParentId");

		if (contentParentId != null) {
			setContentParentId(contentParentId);
		}

		Long contentLinkedId = (Long)attributes.get("contentLinkedId");

		if (contentLinkedId != null) {
			setContentLinkedId(contentLinkedId);
		}

		String url = (String)attributes.get("url");

		if (url != null) {
			setUrl(url);
		}
	}

	@JSON
	@Override
	public String getUuid() {
		if (_uuid == null) {
			return "";
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		if (_originalUuid == null) {
			_originalUuid = _uuid;
		}

		_uuid = uuid;
	}

	public String getOriginalUuid() {
		return GetterUtil.getString(_originalUuid);
	}

	@JSON
	@Override
	public long getContentRelatedId() {
		return _contentRelatedId;
	}

	@Override
	public void setContentRelatedId(long contentRelatedId) {
		_contentRelatedId = contentRelatedId;
	}

	@JSON
	@Override
	public long getContentParentId() {
		return _contentParentId;
	}

	@Override
	public void setContentParentId(long contentParentId) {
		_columnBitmask |= CONTENTPARENTID_COLUMN_BITMASK;

		if (!_setOriginalContentParentId) {
			_setOriginalContentParentId = true;

			_originalContentParentId = _contentParentId;
		}

		_contentParentId = contentParentId;
	}

	public long getOriginalContentParentId() {
		return _originalContentParentId;
	}

	@JSON
	@Override
	public long getContentLinkedId() {
		return _contentLinkedId;
	}

	@Override
	public void setContentLinkedId(long contentLinkedId) {
		_contentLinkedId = contentLinkedId;
	}

	@JSON
	@Override
	public String getUrl() {
		if (_url == null) {
			return "";
		}
		else {
			return _url;
		}
	}

	@Override
	public void setUrl(String url) {
		_url = url;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			ContentRelated.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public ContentRelated toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (ContentRelated)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		ContentRelatedImpl contentRelatedImpl = new ContentRelatedImpl();

		contentRelatedImpl.setUuid(getUuid());
		contentRelatedImpl.setContentRelatedId(getContentRelatedId());
		contentRelatedImpl.setContentParentId(getContentParentId());
		contentRelatedImpl.setContentLinkedId(getContentLinkedId());
		contentRelatedImpl.setUrl(getUrl());

		contentRelatedImpl.resetOriginalValues();

		return contentRelatedImpl;
	}

	@Override
	public int compareTo(ContentRelated contentRelated) {
		long primaryKey = contentRelated.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof ContentRelated)) {
			return false;
		}

		ContentRelated contentRelated = (ContentRelated)obj;

		long primaryKey = contentRelated.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		ContentRelatedModelImpl contentRelatedModelImpl = this;

		contentRelatedModelImpl._originalUuid = contentRelatedModelImpl._uuid;

		contentRelatedModelImpl._originalContentParentId = contentRelatedModelImpl._contentParentId;

		contentRelatedModelImpl._setOriginalContentParentId = false;

		contentRelatedModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<ContentRelated> toCacheModel() {
		ContentRelatedCacheModel contentRelatedCacheModel = new ContentRelatedCacheModel();

		contentRelatedCacheModel.uuid = getUuid();

		String uuid = contentRelatedCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			contentRelatedCacheModel.uuid = null;
		}

		contentRelatedCacheModel.contentRelatedId = getContentRelatedId();

		contentRelatedCacheModel.contentParentId = getContentParentId();

		contentRelatedCacheModel.contentLinkedId = getContentLinkedId();

		contentRelatedCacheModel.url = getUrl();

		String url = contentRelatedCacheModel.url;

		if ((url != null) && (url.length() == 0)) {
			contentRelatedCacheModel.url = null;
		}

		return contentRelatedCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(11);

		sb.append("{uuid=");
		sb.append(getUuid());
		sb.append(", contentRelatedId=");
		sb.append(getContentRelatedId());
		sb.append(", contentParentId=");
		sb.append(getContentParentId());
		sb.append(", contentLinkedId=");
		sb.append(getContentLinkedId());
		sb.append(", url=");
		sb.append(getUrl());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(19);

		sb.append("<model><model-name>");
		sb.append("es.aragon.base.migration.model.ContentRelated");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>uuid</column-name><column-value><![CDATA[");
		sb.append(getUuid());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>contentRelatedId</column-name><column-value><![CDATA[");
		sb.append(getContentRelatedId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>contentParentId</column-name><column-value><![CDATA[");
		sb.append(getContentParentId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>contentLinkedId</column-name><column-value><![CDATA[");
		sb.append(getContentLinkedId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>url</column-name><column-value><![CDATA[");
		sb.append(getUrl());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = ContentRelated.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			ContentRelated.class, ModelWrapper.class
		};
	private String _uuid;
	private String _originalUuid;
	private long _contentRelatedId;
	private long _contentParentId;
	private long _originalContentParentId;
	private boolean _setOriginalContentParentId;
	private long _contentLinkedId;
	private String _url;
	private long _columnBitmask;
	private ContentRelated _escapedModel;
}