/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package es.aragon.base.migration.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;

import es.aragon.base.migration.model.ContentUrl;
import es.aragon.base.migration.model.ContentUrlModel;
import es.aragon.base.migration.model.ContentUrlSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the ContentUrl service. Represents a row in the &quot;EAB_MG_ContentUrl&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link ContentUrlModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link ContentUrlImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see ContentUrlImpl
 * @see ContentUrl
 * @see ContentUrlModel
 * @generated
 */
@JSON(strict = true)
@ProviderType
public class ContentUrlModelImpl extends BaseModelImpl<ContentUrl>
	implements ContentUrlModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a content url model instance should use the {@link ContentUrl} interface instead.
	 */
	public static final String TABLE_NAME = "EAB_MG_ContentUrl";
	public static final Object[][] TABLE_COLUMNS = {
			{ "uuid_", Types.VARCHAR },
			{ "contentUrlId", Types.BIGINT },
			{ "contentOriginId", Types.BIGINT },
			{ "contentDestinationId", Types.BIGINT },
			{ "urlOrigin", Types.VARCHAR },
			{ "urlDestination", Types.VARCHAR },
			{ "className", Types.VARCHAR }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("contentUrlId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("contentOriginId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("contentDestinationId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("urlOrigin", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("urlDestination", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("className", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE = "create table EAB_MG_ContentUrl (uuid_ VARCHAR(75) null,contentUrlId LONG not null primary key,contentOriginId LONG,contentDestinationId LONG,urlOrigin STRING null,urlDestination STRING null,className VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table EAB_MG_ContentUrl";
	public static final String ORDER_BY_JPQL = " ORDER BY contentUrl.contentUrlId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY EAB_MG_ContentUrl.contentUrlId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(es.aragon.base.migration.service.util.ServiceProps.get(
				"value.object.entity.cache.enabled.es.aragon.base.migration.model.ContentUrl"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(es.aragon.base.migration.service.util.ServiceProps.get(
				"value.object.finder.cache.enabled.es.aragon.base.migration.model.ContentUrl"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(es.aragon.base.migration.service.util.ServiceProps.get(
				"value.object.column.bitmask.enabled.es.aragon.base.migration.model.ContentUrl"),
			true);
	public static final long CONTENTORIGINID_COLUMN_BITMASK = 1L;
	public static final long UUID_COLUMN_BITMASK = 2L;
	public static final long CONTENTURLID_COLUMN_BITMASK = 4L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static ContentUrl toModel(ContentUrlSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		ContentUrl model = new ContentUrlImpl();

		model.setUuid(soapModel.getUuid());
		model.setContentUrlId(soapModel.getContentUrlId());
		model.setContentOriginId(soapModel.getContentOriginId());
		model.setContentDestinationId(soapModel.getContentDestinationId());
		model.setUrlOrigin(soapModel.getUrlOrigin());
		model.setUrlDestination(soapModel.getUrlDestination());
		model.setClassName(soapModel.getClassName());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<ContentUrl> toModels(ContentUrlSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<ContentUrl> models = new ArrayList<ContentUrl>(soapModels.length);

		for (ContentUrlSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(es.aragon.base.migration.service.util.ServiceProps.get(
				"lock.expiration.time.es.aragon.base.migration.model.ContentUrl"));

	public ContentUrlModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _contentUrlId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setContentUrlId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _contentUrlId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return ContentUrl.class;
	}

	@Override
	public String getModelClassName() {
		return ContentUrl.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("uuid", getUuid());
		attributes.put("contentUrlId", getContentUrlId());
		attributes.put("contentOriginId", getContentOriginId());
		attributes.put("contentDestinationId", getContentDestinationId());
		attributes.put("urlOrigin", getUrlOrigin());
		attributes.put("urlDestination", getUrlDestination());
		attributes.put("className", getClassName());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		String uuid = (String)attributes.get("uuid");

		if (uuid != null) {
			setUuid(uuid);
		}

		Long contentUrlId = (Long)attributes.get("contentUrlId");

		if (contentUrlId != null) {
			setContentUrlId(contentUrlId);
		}

		Long contentOriginId = (Long)attributes.get("contentOriginId");

		if (contentOriginId != null) {
			setContentOriginId(contentOriginId);
		}

		Long contentDestinationId = (Long)attributes.get("contentDestinationId");

		if (contentDestinationId != null) {
			setContentDestinationId(contentDestinationId);
		}

		String urlOrigin = (String)attributes.get("urlOrigin");

		if (urlOrigin != null) {
			setUrlOrigin(urlOrigin);
		}

		String urlDestination = (String)attributes.get("urlDestination");

		if (urlDestination != null) {
			setUrlDestination(urlDestination);
		}

		String className = (String)attributes.get("className");

		if (className != null) {
			setClassName(className);
		}
	}

	@JSON
	@Override
	public String getUuid() {
		if (_uuid == null) {
			return "";
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		if (_originalUuid == null) {
			_originalUuid = _uuid;
		}

		_uuid = uuid;
	}

	public String getOriginalUuid() {
		return GetterUtil.getString(_originalUuid);
	}

	@JSON
	@Override
	public long getContentUrlId() {
		return _contentUrlId;
	}

	@Override
	public void setContentUrlId(long contentUrlId) {
		_contentUrlId = contentUrlId;
	}

	@JSON
	@Override
	public long getContentOriginId() {
		return _contentOriginId;
	}

	@Override
	public void setContentOriginId(long contentOriginId) {
		_columnBitmask |= CONTENTORIGINID_COLUMN_BITMASK;

		if (!_setOriginalContentOriginId) {
			_setOriginalContentOriginId = true;

			_originalContentOriginId = _contentOriginId;
		}

		_contentOriginId = contentOriginId;
	}

	public long getOriginalContentOriginId() {
		return _originalContentOriginId;
	}

	@JSON
	@Override
	public long getContentDestinationId() {
		return _contentDestinationId;
	}

	@Override
	public void setContentDestinationId(long contentDestinationId) {
		_contentDestinationId = contentDestinationId;
	}

	@JSON
	@Override
	public String getUrlOrigin() {
		if (_urlOrigin == null) {
			return "";
		}
		else {
			return _urlOrigin;
		}
	}

	@Override
	public void setUrlOrigin(String urlOrigin) {
		_urlOrigin = urlOrigin;
	}

	@JSON
	@Override
	public String getUrlDestination() {
		if (_urlDestination == null) {
			return "";
		}
		else {
			return _urlDestination;
		}
	}

	@Override
	public void setUrlDestination(String urlDestination) {
		_urlDestination = urlDestination;
	}

	@JSON
	@Override
	public String getClassName() {
		if (_className == null) {
			return "";
		}
		else {
			return _className;
		}
	}

	@Override
	public void setClassName(String className) {
		_className = className;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			ContentUrl.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public ContentUrl toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (ContentUrl)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		ContentUrlImpl contentUrlImpl = new ContentUrlImpl();

		contentUrlImpl.setUuid(getUuid());
		contentUrlImpl.setContentUrlId(getContentUrlId());
		contentUrlImpl.setContentOriginId(getContentOriginId());
		contentUrlImpl.setContentDestinationId(getContentDestinationId());
		contentUrlImpl.setUrlOrigin(getUrlOrigin());
		contentUrlImpl.setUrlDestination(getUrlDestination());
		contentUrlImpl.setClassName(getClassName());

		contentUrlImpl.resetOriginalValues();

		return contentUrlImpl;
	}

	@Override
	public int compareTo(ContentUrl contentUrl) {
		long primaryKey = contentUrl.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof ContentUrl)) {
			return false;
		}

		ContentUrl contentUrl = (ContentUrl)obj;

		long primaryKey = contentUrl.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		ContentUrlModelImpl contentUrlModelImpl = this;

		contentUrlModelImpl._originalUuid = contentUrlModelImpl._uuid;

		contentUrlModelImpl._originalContentOriginId = contentUrlModelImpl._contentOriginId;

		contentUrlModelImpl._setOriginalContentOriginId = false;

		contentUrlModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<ContentUrl> toCacheModel() {
		ContentUrlCacheModel contentUrlCacheModel = new ContentUrlCacheModel();

		contentUrlCacheModel.uuid = getUuid();

		String uuid = contentUrlCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			contentUrlCacheModel.uuid = null;
		}

		contentUrlCacheModel.contentUrlId = getContentUrlId();

		contentUrlCacheModel.contentOriginId = getContentOriginId();

		contentUrlCacheModel.contentDestinationId = getContentDestinationId();

		contentUrlCacheModel.urlOrigin = getUrlOrigin();

		String urlOrigin = contentUrlCacheModel.urlOrigin;

		if ((urlOrigin != null) && (urlOrigin.length() == 0)) {
			contentUrlCacheModel.urlOrigin = null;
		}

		contentUrlCacheModel.urlDestination = getUrlDestination();

		String urlDestination = contentUrlCacheModel.urlDestination;

		if ((urlDestination != null) && (urlDestination.length() == 0)) {
			contentUrlCacheModel.urlDestination = null;
		}

		contentUrlCacheModel.className = getClassName();

		String className = contentUrlCacheModel.className;

		if ((className != null) && (className.length() == 0)) {
			contentUrlCacheModel.className = null;
		}

		return contentUrlCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(15);

		sb.append("{uuid=");
		sb.append(getUuid());
		sb.append(", contentUrlId=");
		sb.append(getContentUrlId());
		sb.append(", contentOriginId=");
		sb.append(getContentOriginId());
		sb.append(", contentDestinationId=");
		sb.append(getContentDestinationId());
		sb.append(", urlOrigin=");
		sb.append(getUrlOrigin());
		sb.append(", urlDestination=");
		sb.append(getUrlDestination());
		sb.append(", className=");
		sb.append(getClassName());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(25);

		sb.append("<model><model-name>");
		sb.append("es.aragon.base.migration.model.ContentUrl");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>uuid</column-name><column-value><![CDATA[");
		sb.append(getUuid());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>contentUrlId</column-name><column-value><![CDATA[");
		sb.append(getContentUrlId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>contentOriginId</column-name><column-value><![CDATA[");
		sb.append(getContentOriginId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>contentDestinationId</column-name><column-value><![CDATA[");
		sb.append(getContentDestinationId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>urlOrigin</column-name><column-value><![CDATA[");
		sb.append(getUrlOrigin());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>urlDestination</column-name><column-value><![CDATA[");
		sb.append(getUrlDestination());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>className</column-name><column-value><![CDATA[");
		sb.append(getClassName());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = ContentUrl.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			ContentUrl.class, ModelWrapper.class
		};
	private String _uuid;
	private String _originalUuid;
	private long _contentUrlId;
	private long _contentOriginId;
	private long _originalContentOriginId;
	private boolean _setOriginalContentOriginId;
	private long _contentDestinationId;
	private String _urlOrigin;
	private String _urlDestination;
	private String _className;
	private long _columnBitmask;
	private ContentUrl _escapedModel;
}