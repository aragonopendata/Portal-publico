/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package es.aragon.base.migration.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;

import es.aragon.base.migration.model.ContentMetadata;
import es.aragon.base.migration.model.ContentMetadataModel;
import es.aragon.base.migration.model.ContentMetadataSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the ContentMetadata service. Represents a row in the &quot;EAB_MG_ContentMetadata&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link ContentMetadataModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link ContentMetadataImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see ContentMetadataImpl
 * @see ContentMetadata
 * @see ContentMetadataModel
 * @generated
 */
@JSON(strict = true)
@ProviderType
public class ContentMetadataModelImpl extends BaseModelImpl<ContentMetadata>
	implements ContentMetadataModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a content metadata model instance should use the {@link ContentMetadata} interface instead.
	 */
	public static final String TABLE_NAME = "EAB_MG_ContentMetadata";
	public static final Object[][] TABLE_COLUMNS = {
			{ "uuid_", Types.VARCHAR },
			{ "contentMetadataId", Types.BIGINT },
			{ "contentId", Types.BIGINT },
			{ "primaryBody", Types.VARCHAR },
			{ "primaryImage", Types.VARCHAR },
			{ "primaryVideo", Types.VARCHAR },
			{ "secondaryBody", Types.VARCHAR },
			{ "imagesGalleryTitle", Types.VARCHAR },
			{ "imagesGalleryImages", Types.VARCHAR },
			{ "linksListTitle", Types.VARCHAR },
			{ "linksListLinks", Types.VARCHAR }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("contentMetadataId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("contentId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("primaryBody", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("primaryImage", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("primaryVideo", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("secondaryBody", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("imagesGalleryTitle", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("imagesGalleryImages", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("linksListTitle", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("linksListLinks", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE = "create table EAB_MG_ContentMetadata (uuid_ VARCHAR(75) null,contentMetadataId LONG not null primary key,contentId LONG,primaryBody STRING null,primaryImage STRING null,primaryVideo STRING null,secondaryBody STRING null,imagesGalleryTitle VARCHAR(75) null,imagesGalleryImages STRING null,linksListTitle VARCHAR(75) null,linksListLinks STRING null)";
	public static final String TABLE_SQL_DROP = "drop table EAB_MG_ContentMetadata";
	public static final String ORDER_BY_JPQL = " ORDER BY contentMetadata.contentMetadataId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY EAB_MG_ContentMetadata.contentMetadataId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(es.aragon.base.migration.service.util.ServiceProps.get(
				"value.object.entity.cache.enabled.es.aragon.base.migration.model.ContentMetadata"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(es.aragon.base.migration.service.util.ServiceProps.get(
				"value.object.finder.cache.enabled.es.aragon.base.migration.model.ContentMetadata"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(es.aragon.base.migration.service.util.ServiceProps.get(
				"value.object.column.bitmask.enabled.es.aragon.base.migration.model.ContentMetadata"),
			true);
	public static final long CONTENTID_COLUMN_BITMASK = 1L;
	public static final long UUID_COLUMN_BITMASK = 2L;
	public static final long CONTENTMETADATAID_COLUMN_BITMASK = 4L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static ContentMetadata toModel(ContentMetadataSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		ContentMetadata model = new ContentMetadataImpl();

		model.setUuid(soapModel.getUuid());
		model.setContentMetadataId(soapModel.getContentMetadataId());
		model.setContentId(soapModel.getContentId());
		model.setPrimaryBody(soapModel.getPrimaryBody());
		model.setPrimaryImage(soapModel.getPrimaryImage());
		model.setPrimaryVideo(soapModel.getPrimaryVideo());
		model.setSecondaryBody(soapModel.getSecondaryBody());
		model.setImagesGalleryTitle(soapModel.getImagesGalleryTitle());
		model.setImagesGalleryImages(soapModel.getImagesGalleryImages());
		model.setLinksListTitle(soapModel.getLinksListTitle());
		model.setLinksListLinks(soapModel.getLinksListLinks());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<ContentMetadata> toModels(
		ContentMetadataSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<ContentMetadata> models = new ArrayList<ContentMetadata>(soapModels.length);

		for (ContentMetadataSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(es.aragon.base.migration.service.util.ServiceProps.get(
				"lock.expiration.time.es.aragon.base.migration.model.ContentMetadata"));

	public ContentMetadataModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _contentMetadataId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setContentMetadataId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _contentMetadataId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return ContentMetadata.class;
	}

	@Override
	public String getModelClassName() {
		return ContentMetadata.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("uuid", getUuid());
		attributes.put("contentMetadataId", getContentMetadataId());
		attributes.put("contentId", getContentId());
		attributes.put("primaryBody", getPrimaryBody());
		attributes.put("primaryImage", getPrimaryImage());
		attributes.put("primaryVideo", getPrimaryVideo());
		attributes.put("secondaryBody", getSecondaryBody());
		attributes.put("imagesGalleryTitle", getImagesGalleryTitle());
		attributes.put("imagesGalleryImages", getImagesGalleryImages());
		attributes.put("linksListTitle", getLinksListTitle());
		attributes.put("linksListLinks", getLinksListLinks());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		String uuid = (String)attributes.get("uuid");

		if (uuid != null) {
			setUuid(uuid);
		}

		Long contentMetadataId = (Long)attributes.get("contentMetadataId");

		if (contentMetadataId != null) {
			setContentMetadataId(contentMetadataId);
		}

		Long contentId = (Long)attributes.get("contentId");

		if (contentId != null) {
			setContentId(contentId);
		}

		String primaryBody = (String)attributes.get("primaryBody");

		if (primaryBody != null) {
			setPrimaryBody(primaryBody);
		}

		String primaryImage = (String)attributes.get("primaryImage");

		if (primaryImage != null) {
			setPrimaryImage(primaryImage);
		}

		String primaryVideo = (String)attributes.get("primaryVideo");

		if (primaryVideo != null) {
			setPrimaryVideo(primaryVideo);
		}

		String secondaryBody = (String)attributes.get("secondaryBody");

		if (secondaryBody != null) {
			setSecondaryBody(secondaryBody);
		}

		String imagesGalleryTitle = (String)attributes.get("imagesGalleryTitle");

		if (imagesGalleryTitle != null) {
			setImagesGalleryTitle(imagesGalleryTitle);
		}

		String imagesGalleryImages = (String)attributes.get(
				"imagesGalleryImages");

		if (imagesGalleryImages != null) {
			setImagesGalleryImages(imagesGalleryImages);
		}

		String linksListTitle = (String)attributes.get("linksListTitle");

		if (linksListTitle != null) {
			setLinksListTitle(linksListTitle);
		}

		String linksListLinks = (String)attributes.get("linksListLinks");

		if (linksListLinks != null) {
			setLinksListLinks(linksListLinks);
		}
	}

	@JSON
	@Override
	public String getUuid() {
		if (_uuid == null) {
			return "";
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		if (_originalUuid == null) {
			_originalUuid = _uuid;
		}

		_uuid = uuid;
	}

	public String getOriginalUuid() {
		return GetterUtil.getString(_originalUuid);
	}

	@JSON
	@Override
	public long getContentMetadataId() {
		return _contentMetadataId;
	}

	@Override
	public void setContentMetadataId(long contentMetadataId) {
		_contentMetadataId = contentMetadataId;
	}

	@JSON
	@Override
	public long getContentId() {
		return _contentId;
	}

	@Override
	public void setContentId(long contentId) {
		_columnBitmask |= CONTENTID_COLUMN_BITMASK;

		if (!_setOriginalContentId) {
			_setOriginalContentId = true;

			_originalContentId = _contentId;
		}

		_contentId = contentId;
	}

	public long getOriginalContentId() {
		return _originalContentId;
	}

	@JSON
	@Override
	public String getPrimaryBody() {
		if (_primaryBody == null) {
			return "";
		}
		else {
			return _primaryBody;
		}
	}

	@Override
	public void setPrimaryBody(String primaryBody) {
		_primaryBody = primaryBody;
	}

	@JSON
	@Override
	public String getPrimaryImage() {
		if (_primaryImage == null) {
			return "";
		}
		else {
			return _primaryImage;
		}
	}

	@Override
	public void setPrimaryImage(String primaryImage) {
		_primaryImage = primaryImage;
	}

	@JSON
	@Override
	public String getPrimaryVideo() {
		if (_primaryVideo == null) {
			return "";
		}
		else {
			return _primaryVideo;
		}
	}

	@Override
	public void setPrimaryVideo(String primaryVideo) {
		_primaryVideo = primaryVideo;
	}

	@JSON
	@Override
	public String getSecondaryBody() {
		if (_secondaryBody == null) {
			return "";
		}
		else {
			return _secondaryBody;
		}
	}

	@Override
	public void setSecondaryBody(String secondaryBody) {
		_secondaryBody = secondaryBody;
	}

	@JSON
	@Override
	public String getImagesGalleryTitle() {
		if (_imagesGalleryTitle == null) {
			return "";
		}
		else {
			return _imagesGalleryTitle;
		}
	}

	@Override
	public void setImagesGalleryTitle(String imagesGalleryTitle) {
		_imagesGalleryTitle = imagesGalleryTitle;
	}

	@JSON
	@Override
	public String getImagesGalleryImages() {
		if (_imagesGalleryImages == null) {
			return "";
		}
		else {
			return _imagesGalleryImages;
		}
	}

	@Override
	public void setImagesGalleryImages(String imagesGalleryImages) {
		_imagesGalleryImages = imagesGalleryImages;
	}

	@JSON
	@Override
	public String getLinksListTitle() {
		if (_linksListTitle == null) {
			return "";
		}
		else {
			return _linksListTitle;
		}
	}

	@Override
	public void setLinksListTitle(String linksListTitle) {
		_linksListTitle = linksListTitle;
	}

	@JSON
	@Override
	public String getLinksListLinks() {
		if (_linksListLinks == null) {
			return "";
		}
		else {
			return _linksListLinks;
		}
	}

	@Override
	public void setLinksListLinks(String linksListLinks) {
		_linksListLinks = linksListLinks;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			ContentMetadata.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public ContentMetadata toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (ContentMetadata)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		ContentMetadataImpl contentMetadataImpl = new ContentMetadataImpl();

		contentMetadataImpl.setUuid(getUuid());
		contentMetadataImpl.setContentMetadataId(getContentMetadataId());
		contentMetadataImpl.setContentId(getContentId());
		contentMetadataImpl.setPrimaryBody(getPrimaryBody());
		contentMetadataImpl.setPrimaryImage(getPrimaryImage());
		contentMetadataImpl.setPrimaryVideo(getPrimaryVideo());
		contentMetadataImpl.setSecondaryBody(getSecondaryBody());
		contentMetadataImpl.setImagesGalleryTitle(getImagesGalleryTitle());
		contentMetadataImpl.setImagesGalleryImages(getImagesGalleryImages());
		contentMetadataImpl.setLinksListTitle(getLinksListTitle());
		contentMetadataImpl.setLinksListLinks(getLinksListLinks());

		contentMetadataImpl.resetOriginalValues();

		return contentMetadataImpl;
	}

	@Override
	public int compareTo(ContentMetadata contentMetadata) {
		long primaryKey = contentMetadata.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof ContentMetadata)) {
			return false;
		}

		ContentMetadata contentMetadata = (ContentMetadata)obj;

		long primaryKey = contentMetadata.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		ContentMetadataModelImpl contentMetadataModelImpl = this;

		contentMetadataModelImpl._originalUuid = contentMetadataModelImpl._uuid;

		contentMetadataModelImpl._originalContentId = contentMetadataModelImpl._contentId;

		contentMetadataModelImpl._setOriginalContentId = false;

		contentMetadataModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<ContentMetadata> toCacheModel() {
		ContentMetadataCacheModel contentMetadataCacheModel = new ContentMetadataCacheModel();

		contentMetadataCacheModel.uuid = getUuid();

		String uuid = contentMetadataCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			contentMetadataCacheModel.uuid = null;
		}

		contentMetadataCacheModel.contentMetadataId = getContentMetadataId();

		contentMetadataCacheModel.contentId = getContentId();

		contentMetadataCacheModel.primaryBody = getPrimaryBody();

		String primaryBody = contentMetadataCacheModel.primaryBody;

		if ((primaryBody != null) && (primaryBody.length() == 0)) {
			contentMetadataCacheModel.primaryBody = null;
		}

		contentMetadataCacheModel.primaryImage = getPrimaryImage();

		String primaryImage = contentMetadataCacheModel.primaryImage;

		if ((primaryImage != null) && (primaryImage.length() == 0)) {
			contentMetadataCacheModel.primaryImage = null;
		}

		contentMetadataCacheModel.primaryVideo = getPrimaryVideo();

		String primaryVideo = contentMetadataCacheModel.primaryVideo;

		if ((primaryVideo != null) && (primaryVideo.length() == 0)) {
			contentMetadataCacheModel.primaryVideo = null;
		}

		contentMetadataCacheModel.secondaryBody = getSecondaryBody();

		String secondaryBody = contentMetadataCacheModel.secondaryBody;

		if ((secondaryBody != null) && (secondaryBody.length() == 0)) {
			contentMetadataCacheModel.secondaryBody = null;
		}

		contentMetadataCacheModel.imagesGalleryTitle = getImagesGalleryTitle();

		String imagesGalleryTitle = contentMetadataCacheModel.imagesGalleryTitle;

		if ((imagesGalleryTitle != null) && (imagesGalleryTitle.length() == 0)) {
			contentMetadataCacheModel.imagesGalleryTitle = null;
		}

		contentMetadataCacheModel.imagesGalleryImages = getImagesGalleryImages();

		String imagesGalleryImages = contentMetadataCacheModel.imagesGalleryImages;

		if ((imagesGalleryImages != null) &&
				(imagesGalleryImages.length() == 0)) {
			contentMetadataCacheModel.imagesGalleryImages = null;
		}

		contentMetadataCacheModel.linksListTitle = getLinksListTitle();

		String linksListTitle = contentMetadataCacheModel.linksListTitle;

		if ((linksListTitle != null) && (linksListTitle.length() == 0)) {
			contentMetadataCacheModel.linksListTitle = null;
		}

		contentMetadataCacheModel.linksListLinks = getLinksListLinks();

		String linksListLinks = contentMetadataCacheModel.linksListLinks;

		if ((linksListLinks != null) && (linksListLinks.length() == 0)) {
			contentMetadataCacheModel.linksListLinks = null;
		}

		return contentMetadataCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(23);

		sb.append("{uuid=");
		sb.append(getUuid());
		sb.append(", contentMetadataId=");
		sb.append(getContentMetadataId());
		sb.append(", contentId=");
		sb.append(getContentId());
		sb.append(", primaryBody=");
		sb.append(getPrimaryBody());
		sb.append(", primaryImage=");
		sb.append(getPrimaryImage());
		sb.append(", primaryVideo=");
		sb.append(getPrimaryVideo());
		sb.append(", secondaryBody=");
		sb.append(getSecondaryBody());
		sb.append(", imagesGalleryTitle=");
		sb.append(getImagesGalleryTitle());
		sb.append(", imagesGalleryImages=");
		sb.append(getImagesGalleryImages());
		sb.append(", linksListTitle=");
		sb.append(getLinksListTitle());
		sb.append(", linksListLinks=");
		sb.append(getLinksListLinks());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(37);

		sb.append("<model><model-name>");
		sb.append("es.aragon.base.migration.model.ContentMetadata");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>uuid</column-name><column-value><![CDATA[");
		sb.append(getUuid());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>contentMetadataId</column-name><column-value><![CDATA[");
		sb.append(getContentMetadataId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>contentId</column-name><column-value><![CDATA[");
		sb.append(getContentId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>primaryBody</column-name><column-value><![CDATA[");
		sb.append(getPrimaryBody());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>primaryImage</column-name><column-value><![CDATA[");
		sb.append(getPrimaryImage());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>primaryVideo</column-name><column-value><![CDATA[");
		sb.append(getPrimaryVideo());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>secondaryBody</column-name><column-value><![CDATA[");
		sb.append(getSecondaryBody());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>imagesGalleryTitle</column-name><column-value><![CDATA[");
		sb.append(getImagesGalleryTitle());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>imagesGalleryImages</column-name><column-value><![CDATA[");
		sb.append(getImagesGalleryImages());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>linksListTitle</column-name><column-value><![CDATA[");
		sb.append(getLinksListTitle());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>linksListLinks</column-name><column-value><![CDATA[");
		sb.append(getLinksListLinks());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = ContentMetadata.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			ContentMetadata.class, ModelWrapper.class
		};
	private String _uuid;
	private String _originalUuid;
	private long _contentMetadataId;
	private long _contentId;
	private long _originalContentId;
	private boolean _setOriginalContentId;
	private String _primaryBody;
	private String _primaryImage;
	private String _primaryVideo;
	private String _secondaryBody;
	private String _imagesGalleryTitle;
	private String _imagesGalleryImages;
	private String _linksListTitle;
	private String _linksListLinks;
	private long _columnBitmask;
	private ContentMetadata _escapedModel;
}