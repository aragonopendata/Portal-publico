/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package es.aragon.base.migration.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;

import es.aragon.base.migration.model.Rule;
import es.aragon.base.migration.model.RuleModel;
import es.aragon.base.migration.model.RuleSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the Rule service. Represents a row in the &quot;EAB_MG_Rule&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link RuleModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link RuleImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see RuleImpl
 * @see Rule
 * @see RuleModel
 * @generated
 */
@JSON(strict = true)
@ProviderType
public class RuleModelImpl extends BaseModelImpl<Rule> implements RuleModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a rule model instance should use the {@link Rule} interface instead.
	 */
	public static final String TABLE_NAME = "EAB_MG_Rule";
	public static final Object[][] TABLE_COLUMNS = {
			{ "uuid_", Types.VARCHAR },
			{ "ruleId", Types.BIGINT },
			{ "typeId", Types.INTEGER },
			{ "userGroupId", Types.BIGINT },
			{ "journalFolderId", Types.BIGINT },
			{ "assignedUserId", Types.BIGINT },
			{ "url", Types.VARCHAR },
			{ "tags", Types.VARCHAR },
			{ "actionId", Types.BIGINT },
			{ "availableUserGroupId", Types.VARCHAR },
			{ "userId", Types.BIGINT },
			{ "modifiedDate", Types.TIMESTAMP }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("ruleId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("typeId", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("userGroupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("journalFolderId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("assignedUserId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("url", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("tags", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("actionId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("availableUserGroupId", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
	}

	public static final String TABLE_SQL_CREATE = "create table EAB_MG_Rule (uuid_ VARCHAR(75) null,ruleId LONG not null primary key,typeId INTEGER,userGroupId LONG,journalFolderId LONG,assignedUserId LONG,url STRING null,tags STRING null,actionId LONG,availableUserGroupId VARCHAR(75) null,userId LONG,modifiedDate DATE null)";
	public static final String TABLE_SQL_DROP = "drop table EAB_MG_Rule";
	public static final String ORDER_BY_JPQL = " ORDER BY rule.ruleId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY EAB_MG_Rule.ruleId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(es.aragon.base.migration.service.util.ServiceProps.get(
				"value.object.entity.cache.enabled.es.aragon.base.migration.model.Rule"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(es.aragon.base.migration.service.util.ServiceProps.get(
				"value.object.finder.cache.enabled.es.aragon.base.migration.model.Rule"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(es.aragon.base.migration.service.util.ServiceProps.get(
				"value.object.column.bitmask.enabled.es.aragon.base.migration.model.Rule"),
			true);
	public static final long TYPEID_COLUMN_BITMASK = 1L;
	public static final long UUID_COLUMN_BITMASK = 2L;
	public static final long RULEID_COLUMN_BITMASK = 4L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static Rule toModel(RuleSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		Rule model = new RuleImpl();

		model.setUuid(soapModel.getUuid());
		model.setRuleId(soapModel.getRuleId());
		model.setTypeId(soapModel.getTypeId());
		model.setUserGroupId(soapModel.getUserGroupId());
		model.setJournalFolderId(soapModel.getJournalFolderId());
		model.setAssignedUserId(soapModel.getAssignedUserId());
		model.setUrl(soapModel.getUrl());
		model.setTags(soapModel.getTags());
		model.setActionId(soapModel.getActionId());
		model.setAvailableUserGroupId(soapModel.getAvailableUserGroupId());
		model.setUserId(soapModel.getUserId());
		model.setModifiedDate(soapModel.getModifiedDate());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<Rule> toModels(RuleSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<Rule> models = new ArrayList<Rule>(soapModels.length);

		for (RuleSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(es.aragon.base.migration.service.util.ServiceProps.get(
				"lock.expiration.time.es.aragon.base.migration.model.Rule"));

	public RuleModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _ruleId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setRuleId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _ruleId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Rule.class;
	}

	@Override
	public String getModelClassName() {
		return Rule.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("uuid", getUuid());
		attributes.put("ruleId", getRuleId());
		attributes.put("typeId", getTypeId());
		attributes.put("userGroupId", getUserGroupId());
		attributes.put("journalFolderId", getJournalFolderId());
		attributes.put("assignedUserId", getAssignedUserId());
		attributes.put("url", getUrl());
		attributes.put("tags", getTags());
		attributes.put("actionId", getActionId());
		attributes.put("availableUserGroupId", getAvailableUserGroupId());
		attributes.put("userId", getUserId());
		attributes.put("modifiedDate", getModifiedDate());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		String uuid = (String)attributes.get("uuid");

		if (uuid != null) {
			setUuid(uuid);
		}

		Long ruleId = (Long)attributes.get("ruleId");

		if (ruleId != null) {
			setRuleId(ruleId);
		}

		Integer typeId = (Integer)attributes.get("typeId");

		if (typeId != null) {
			setTypeId(typeId);
		}

		Long userGroupId = (Long)attributes.get("userGroupId");

		if (userGroupId != null) {
			setUserGroupId(userGroupId);
		}

		Long journalFolderId = (Long)attributes.get("journalFolderId");

		if (journalFolderId != null) {
			setJournalFolderId(journalFolderId);
		}

		Long assignedUserId = (Long)attributes.get("assignedUserId");

		if (assignedUserId != null) {
			setAssignedUserId(assignedUserId);
		}

		String url = (String)attributes.get("url");

		if (url != null) {
			setUrl(url);
		}

		String tags = (String)attributes.get("tags");

		if (tags != null) {
			setTags(tags);
		}

		Long actionId = (Long)attributes.get("actionId");

		if (actionId != null) {
			setActionId(actionId);
		}

		String availableUserGroupId = (String)attributes.get(
				"availableUserGroupId");

		if (availableUserGroupId != null) {
			setAvailableUserGroupId(availableUserGroupId);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		Date modifiedDate = (Date)attributes.get("modifiedDate");

		if (modifiedDate != null) {
			setModifiedDate(modifiedDate);
		}
	}

	@JSON
	@Override
	public String getUuid() {
		if (_uuid == null) {
			return "";
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		if (_originalUuid == null) {
			_originalUuid = _uuid;
		}

		_uuid = uuid;
	}

	public String getOriginalUuid() {
		return GetterUtil.getString(_originalUuid);
	}

	@JSON
	@Override
	public long getRuleId() {
		return _ruleId;
	}

	@Override
	public void setRuleId(long ruleId) {
		_ruleId = ruleId;
	}

	@JSON
	@Override
	public int getTypeId() {
		return _typeId;
	}

	@Override
	public void setTypeId(int typeId) {
		_columnBitmask |= TYPEID_COLUMN_BITMASK;

		if (!_setOriginalTypeId) {
			_setOriginalTypeId = true;

			_originalTypeId = _typeId;
		}

		_typeId = typeId;
	}

	public int getOriginalTypeId() {
		return _originalTypeId;
	}

	@JSON
	@Override
	public long getUserGroupId() {
		return _userGroupId;
	}

	@Override
	public void setUserGroupId(long userGroupId) {
		_userGroupId = userGroupId;
	}

	@JSON
	@Override
	public long getJournalFolderId() {
		return _journalFolderId;
	}

	@Override
	public void setJournalFolderId(long journalFolderId) {
		_journalFolderId = journalFolderId;
	}

	@JSON
	@Override
	public long getAssignedUserId() {
		return _assignedUserId;
	}

	@Override
	public void setAssignedUserId(long assignedUserId) {
		_assignedUserId = assignedUserId;
	}

	@Override
	public String getAssignedUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getAssignedUserId());

			return user.getUuid();
		}
		catch (PortalException pe) {
			return "";
		}
	}

	@Override
	public void setAssignedUserUuid(String assignedUserUuid) {
	}

	@JSON
	@Override
	public String getUrl() {
		if (_url == null) {
			return "";
		}
		else {
			return _url;
		}
	}

	@Override
	public void setUrl(String url) {
		_url = url;
	}

	@JSON
	@Override
	public String getTags() {
		if (_tags == null) {
			return "";
		}
		else {
			return _tags;
		}
	}

	@Override
	public void setTags(String tags) {
		_tags = tags;
	}

	@JSON
	@Override
	public long getActionId() {
		return _actionId;
	}

	@Override
	public void setActionId(long actionId) {
		_actionId = actionId;
	}

	@JSON
	@Override
	public String getAvailableUserGroupId() {
		if (_availableUserGroupId == null) {
			return "";
		}
		else {
			return _availableUserGroupId;
		}
	}

	@Override
	public void setAvailableUserGroupId(String availableUserGroupId) {
		_availableUserGroupId = availableUserGroupId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException pe) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_modifiedDate = modifiedDate;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			Rule.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Rule toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (Rule)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		RuleImpl ruleImpl = new RuleImpl();

		ruleImpl.setUuid(getUuid());
		ruleImpl.setRuleId(getRuleId());
		ruleImpl.setTypeId(getTypeId());
		ruleImpl.setUserGroupId(getUserGroupId());
		ruleImpl.setJournalFolderId(getJournalFolderId());
		ruleImpl.setAssignedUserId(getAssignedUserId());
		ruleImpl.setUrl(getUrl());
		ruleImpl.setTags(getTags());
		ruleImpl.setActionId(getActionId());
		ruleImpl.setAvailableUserGroupId(getAvailableUserGroupId());
		ruleImpl.setUserId(getUserId());
		ruleImpl.setModifiedDate(getModifiedDate());

		ruleImpl.resetOriginalValues();

		return ruleImpl;
	}

	@Override
	public int compareTo(Rule rule) {
		long primaryKey = rule.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof Rule)) {
			return false;
		}

		Rule rule = (Rule)obj;

		long primaryKey = rule.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		RuleModelImpl ruleModelImpl = this;

		ruleModelImpl._originalUuid = ruleModelImpl._uuid;

		ruleModelImpl._originalTypeId = ruleModelImpl._typeId;

		ruleModelImpl._setOriginalTypeId = false;

		ruleModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<Rule> toCacheModel() {
		RuleCacheModel ruleCacheModel = new RuleCacheModel();

		ruleCacheModel.uuid = getUuid();

		String uuid = ruleCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			ruleCacheModel.uuid = null;
		}

		ruleCacheModel.ruleId = getRuleId();

		ruleCacheModel.typeId = getTypeId();

		ruleCacheModel.userGroupId = getUserGroupId();

		ruleCacheModel.journalFolderId = getJournalFolderId();

		ruleCacheModel.assignedUserId = getAssignedUserId();

		ruleCacheModel.url = getUrl();

		String url = ruleCacheModel.url;

		if ((url != null) && (url.length() == 0)) {
			ruleCacheModel.url = null;
		}

		ruleCacheModel.tags = getTags();

		String tags = ruleCacheModel.tags;

		if ((tags != null) && (tags.length() == 0)) {
			ruleCacheModel.tags = null;
		}

		ruleCacheModel.actionId = getActionId();

		ruleCacheModel.availableUserGroupId = getAvailableUserGroupId();

		String availableUserGroupId = ruleCacheModel.availableUserGroupId;

		if ((availableUserGroupId != null) &&
				(availableUserGroupId.length() == 0)) {
			ruleCacheModel.availableUserGroupId = null;
		}

		ruleCacheModel.userId = getUserId();

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			ruleCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			ruleCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		return ruleCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(25);

		sb.append("{uuid=");
		sb.append(getUuid());
		sb.append(", ruleId=");
		sb.append(getRuleId());
		sb.append(", typeId=");
		sb.append(getTypeId());
		sb.append(", userGroupId=");
		sb.append(getUserGroupId());
		sb.append(", journalFolderId=");
		sb.append(getJournalFolderId());
		sb.append(", assignedUserId=");
		sb.append(getAssignedUserId());
		sb.append(", url=");
		sb.append(getUrl());
		sb.append(", tags=");
		sb.append(getTags());
		sb.append(", actionId=");
		sb.append(getActionId());
		sb.append(", availableUserGroupId=");
		sb.append(getAvailableUserGroupId());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(40);

		sb.append("<model><model-name>");
		sb.append("es.aragon.base.migration.model.Rule");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>uuid</column-name><column-value><![CDATA[");
		sb.append(getUuid());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>ruleId</column-name><column-value><![CDATA[");
		sb.append(getRuleId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>typeId</column-name><column-value><![CDATA[");
		sb.append(getTypeId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userGroupId</column-name><column-value><![CDATA[");
		sb.append(getUserGroupId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>journalFolderId</column-name><column-value><![CDATA[");
		sb.append(getJournalFolderId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>assignedUserId</column-name><column-value><![CDATA[");
		sb.append(getAssignedUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>url</column-name><column-value><![CDATA[");
		sb.append(getUrl());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>tags</column-name><column-value><![CDATA[");
		sb.append(getTags());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>actionId</column-name><column-value><![CDATA[");
		sb.append(getActionId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>availableUserGroupId</column-name><column-value><![CDATA[");
		sb.append(getAvailableUserGroupId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = Rule.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			Rule.class, ModelWrapper.class
		};
	private String _uuid;
	private String _originalUuid;
	private long _ruleId;
	private int _typeId;
	private int _originalTypeId;
	private boolean _setOriginalTypeId;
	private long _userGroupId;
	private long _journalFolderId;
	private long _assignedUserId;
	private String _url;
	private String _tags;
	private long _actionId;
	private String _availableUserGroupId;
	private long _userId;
	private Date _modifiedDate;
	private long _columnBitmask;
	private Rule _escapedModel;
}