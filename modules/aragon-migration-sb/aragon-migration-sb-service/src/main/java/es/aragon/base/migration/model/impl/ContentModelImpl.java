/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package es.aragon.base.migration.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;

import es.aragon.base.migration.model.Content;
import es.aragon.base.migration.model.ContentModel;
import es.aragon.base.migration.model.ContentSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the Content service. Represents a row in the &quot;EAB_MG_Content&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link ContentModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link ContentImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see ContentImpl
 * @see Content
 * @see ContentModel
 * @generated
 */
@JSON(strict = true)
@ProviderType
public class ContentModelImpl extends BaseModelImpl<Content>
	implements ContentModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a content model instance should use the {@link Content} interface instead.
	 */
	public static final String TABLE_NAME = "EAB_MG_Content";
	public static final Object[][] TABLE_COLUMNS = {
			{ "uuid_", Types.VARCHAR },
			{ "contentId", Types.BIGINT },
			{ "title", Types.VARCHAR },
			{ "url", Types.VARCHAR },
			{ "contentType", Types.VARCHAR },
			{ "shortExcerpt", Types.VARCHAR },
			{ "excerpt", Types.VARCHAR },
			{ "originalBodyHash", Types.VARCHAR },
			{ "originalBody", Types.VARCHAR },
			{ "areaId", Types.BIGINT },
			{ "actionId", Types.BIGINT },
			{ "statusId", Types.BIGINT },
			{ "templateId", Types.BIGINT },
			{ "tags", Types.VARCHAR },
			{ "lastModifiedUserId", Types.BIGINT },
			{ "assignedUserId", Types.BIGINT },
			{ "userGroupId", Types.BIGINT },
			{ "journalFolderId", Types.BIGINT },
			{ "dateCreated", Types.TIMESTAMP },
			{ "dateModified", Types.TIMESTAMP },
			{ "comments", Types.VARCHAR },
			{ "visibility", Types.INTEGER }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("contentId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("title", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("url", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("contentType", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("shortExcerpt", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("excerpt", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("originalBodyHash", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("originalBody", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("areaId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("actionId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("statusId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("templateId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("tags", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("lastModifiedUserId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("assignedUserId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userGroupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("journalFolderId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("dateCreated", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("dateModified", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("comments", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("visibility", Types.INTEGER);
	}

	public static final String TABLE_SQL_CREATE = "create table EAB_MG_Content (uuid_ VARCHAR(75) null,contentId LONG not null primary key,title STRING null,url STRING null,contentType VARCHAR(75) null,shortExcerpt STRING null,excerpt STRING null,originalBodyHash VARCHAR(75) null,originalBody STRING null,areaId LONG,actionId LONG,statusId LONG,templateId LONG,tags STRING null,lastModifiedUserId LONG,assignedUserId LONG,userGroupId LONG,journalFolderId LONG,dateCreated DATE null,dateModified DATE null,comments STRING null,visibility INTEGER)";
	public static final String TABLE_SQL_DROP = "drop table EAB_MG_Content";
	public static final String ORDER_BY_JPQL = " ORDER BY content.contentId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY EAB_MG_Content.contentId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(es.aragon.base.migration.service.util.ServiceProps.get(
				"value.object.entity.cache.enabled.es.aragon.base.migration.model.Content"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(es.aragon.base.migration.service.util.ServiceProps.get(
				"value.object.finder.cache.enabled.es.aragon.base.migration.model.Content"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(es.aragon.base.migration.service.util.ServiceProps.get(
				"value.object.column.bitmask.enabled.es.aragon.base.migration.model.Content"),
			true);
	public static final long AREAID_COLUMN_BITMASK = 1L;
	public static final long ASSIGNEDUSERID_COLUMN_BITMASK = 2L;
	public static final long LASTMODIFIEDUSERID_COLUMN_BITMASK = 4L;
	public static final long URL_COLUMN_BITMASK = 8L;
	public static final long UUID_COLUMN_BITMASK = 16L;
	public static final long CONTENTID_COLUMN_BITMASK = 32L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static Content toModel(ContentSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		Content model = new ContentImpl();

		model.setUuid(soapModel.getUuid());
		model.setContentId(soapModel.getContentId());
		model.setTitle(soapModel.getTitle());
		model.setUrl(soapModel.getUrl());
		model.setContentType(soapModel.getContentType());
		model.setShortExcerpt(soapModel.getShortExcerpt());
		model.setExcerpt(soapModel.getExcerpt());
		model.setOriginalBodyHash(soapModel.getOriginalBodyHash());
		model.setOriginalBody(soapModel.getOriginalBody());
		model.setAreaId(soapModel.getAreaId());
		model.setActionId(soapModel.getActionId());
		model.setStatusId(soapModel.getStatusId());
		model.setTemplateId(soapModel.getTemplateId());
		model.setTags(soapModel.getTags());
		model.setLastModifiedUserId(soapModel.getLastModifiedUserId());
		model.setAssignedUserId(soapModel.getAssignedUserId());
		model.setUserGroupId(soapModel.getUserGroupId());
		model.setJournalFolderId(soapModel.getJournalFolderId());
		model.setDateCreated(soapModel.getDateCreated());
		model.setDateModified(soapModel.getDateModified());
		model.setComments(soapModel.getComments());
		model.setVisibility(soapModel.getVisibility());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<Content> toModels(ContentSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<Content> models = new ArrayList<Content>(soapModels.length);

		for (ContentSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(es.aragon.base.migration.service.util.ServiceProps.get(
				"lock.expiration.time.es.aragon.base.migration.model.Content"));

	public ContentModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _contentId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setContentId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _contentId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Content.class;
	}

	@Override
	public String getModelClassName() {
		return Content.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("uuid", getUuid());
		attributes.put("contentId", getContentId());
		attributes.put("title", getTitle());
		attributes.put("url", getUrl());
		attributes.put("contentType", getContentType());
		attributes.put("shortExcerpt", getShortExcerpt());
		attributes.put("excerpt", getExcerpt());
		attributes.put("originalBodyHash", getOriginalBodyHash());
		attributes.put("originalBody", getOriginalBody());
		attributes.put("areaId", getAreaId());
		attributes.put("actionId", getActionId());
		attributes.put("statusId", getStatusId());
		attributes.put("templateId", getTemplateId());
		attributes.put("tags", getTags());
		attributes.put("lastModifiedUserId", getLastModifiedUserId());
		attributes.put("assignedUserId", getAssignedUserId());
		attributes.put("userGroupId", getUserGroupId());
		attributes.put("journalFolderId", getJournalFolderId());
		attributes.put("dateCreated", getDateCreated());
		attributes.put("dateModified", getDateModified());
		attributes.put("comments", getComments());
		attributes.put("visibility", getVisibility());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		String uuid = (String)attributes.get("uuid");

		if (uuid != null) {
			setUuid(uuid);
		}

		Long contentId = (Long)attributes.get("contentId");

		if (contentId != null) {
			setContentId(contentId);
		}

		String title = (String)attributes.get("title");

		if (title != null) {
			setTitle(title);
		}

		String url = (String)attributes.get("url");

		if (url != null) {
			setUrl(url);
		}

		String contentType = (String)attributes.get("contentType");

		if (contentType != null) {
			setContentType(contentType);
		}

		String shortExcerpt = (String)attributes.get("shortExcerpt");

		if (shortExcerpt != null) {
			setShortExcerpt(shortExcerpt);
		}

		String excerpt = (String)attributes.get("excerpt");

		if (excerpt != null) {
			setExcerpt(excerpt);
		}

		String originalBodyHash = (String)attributes.get("originalBodyHash");

		if (originalBodyHash != null) {
			setOriginalBodyHash(originalBodyHash);
		}

		String originalBody = (String)attributes.get("originalBody");

		if (originalBody != null) {
			setOriginalBody(originalBody);
		}

		Long areaId = (Long)attributes.get("areaId");

		if (areaId != null) {
			setAreaId(areaId);
		}

		Long actionId = (Long)attributes.get("actionId");

		if (actionId != null) {
			setActionId(actionId);
		}

		Long statusId = (Long)attributes.get("statusId");

		if (statusId != null) {
			setStatusId(statusId);
		}

		Long templateId = (Long)attributes.get("templateId");

		if (templateId != null) {
			setTemplateId(templateId);
		}

		String tags = (String)attributes.get("tags");

		if (tags != null) {
			setTags(tags);
		}

		Long lastModifiedUserId = (Long)attributes.get("lastModifiedUserId");

		if (lastModifiedUserId != null) {
			setLastModifiedUserId(lastModifiedUserId);
		}

		Long assignedUserId = (Long)attributes.get("assignedUserId");

		if (assignedUserId != null) {
			setAssignedUserId(assignedUserId);
		}

		Long userGroupId = (Long)attributes.get("userGroupId");

		if (userGroupId != null) {
			setUserGroupId(userGroupId);
		}

		Long journalFolderId = (Long)attributes.get("journalFolderId");

		if (journalFolderId != null) {
			setJournalFolderId(journalFolderId);
		}

		Date dateCreated = (Date)attributes.get("dateCreated");

		if (dateCreated != null) {
			setDateCreated(dateCreated);
		}

		Date dateModified = (Date)attributes.get("dateModified");

		if (dateModified != null) {
			setDateModified(dateModified);
		}

		String comments = (String)attributes.get("comments");

		if (comments != null) {
			setComments(comments);
		}

		Integer visibility = (Integer)attributes.get("visibility");

		if (visibility != null) {
			setVisibility(visibility);
		}
	}

	@JSON
	@Override
	public String getUuid() {
		if (_uuid == null) {
			return "";
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		if (_originalUuid == null) {
			_originalUuid = _uuid;
		}

		_uuid = uuid;
	}

	public String getOriginalUuid() {
		return GetterUtil.getString(_originalUuid);
	}

	@JSON
	@Override
	public long getContentId() {
		return _contentId;
	}

	@Override
	public void setContentId(long contentId) {
		_contentId = contentId;
	}

	@JSON
	@Override
	public String getTitle() {
		if (_title == null) {
			return "";
		}
		else {
			return _title;
		}
	}

	@Override
	public void setTitle(String title) {
		_title = title;
	}

	@JSON
	@Override
	public String getUrl() {
		if (_url == null) {
			return "";
		}
		else {
			return _url;
		}
	}

	@Override
	public void setUrl(String url) {
		_columnBitmask |= URL_COLUMN_BITMASK;

		if (_originalUrl == null) {
			_originalUrl = _url;
		}

		_url = url;
	}

	public String getOriginalUrl() {
		return GetterUtil.getString(_originalUrl);
	}

	@JSON
	@Override
	public String getContentType() {
		if (_contentType == null) {
			return "";
		}
		else {
			return _contentType;
		}
	}

	@Override
	public void setContentType(String contentType) {
		_contentType = contentType;
	}

	@JSON
	@Override
	public String getShortExcerpt() {
		if (_shortExcerpt == null) {
			return "";
		}
		else {
			return _shortExcerpt;
		}
	}

	@Override
	public void setShortExcerpt(String shortExcerpt) {
		_shortExcerpt = shortExcerpt;
	}

	@JSON
	@Override
	public String getExcerpt() {
		if (_excerpt == null) {
			return "";
		}
		else {
			return _excerpt;
		}
	}

	@Override
	public void setExcerpt(String excerpt) {
		_excerpt = excerpt;
	}

	@JSON
	@Override
	public String getOriginalBodyHash() {
		if (_originalBodyHash == null) {
			return "";
		}
		else {
			return _originalBodyHash;
		}
	}

	@Override
	public void setOriginalBodyHash(String originalBodyHash) {
		_originalBodyHash = originalBodyHash;
	}

	@JSON
	@Override
	public String getOriginalBody() {
		if (_originalBody == null) {
			return "";
		}
		else {
			return _originalBody;
		}
	}

	@Override
	public void setOriginalBody(String originalBody) {
		_originalBody = originalBody;
	}

	@JSON
	@Override
	public long getAreaId() {
		return _areaId;
	}

	@Override
	public void setAreaId(long areaId) {
		_columnBitmask |= AREAID_COLUMN_BITMASK;

		if (!_setOriginalAreaId) {
			_setOriginalAreaId = true;

			_originalAreaId = _areaId;
		}

		_areaId = areaId;
	}

	public long getOriginalAreaId() {
		return _originalAreaId;
	}

	@JSON
	@Override
	public long getActionId() {
		return _actionId;
	}

	@Override
	public void setActionId(long actionId) {
		_actionId = actionId;
	}

	@JSON
	@Override
	public long getStatusId() {
		return _statusId;
	}

	@Override
	public void setStatusId(long statusId) {
		_statusId = statusId;
	}

	@JSON
	@Override
	public long getTemplateId() {
		return _templateId;
	}

	@Override
	public void setTemplateId(long templateId) {
		_templateId = templateId;
	}

	@JSON
	@Override
	public String getTags() {
		if (_tags == null) {
			return "";
		}
		else {
			return _tags;
		}
	}

	@Override
	public void setTags(String tags) {
		_tags = tags;
	}

	@JSON
	@Override
	public long getLastModifiedUserId() {
		return _lastModifiedUserId;
	}

	@Override
	public void setLastModifiedUserId(long lastModifiedUserId) {
		_columnBitmask |= LASTMODIFIEDUSERID_COLUMN_BITMASK;

		if (!_setOriginalLastModifiedUserId) {
			_setOriginalLastModifiedUserId = true;

			_originalLastModifiedUserId = _lastModifiedUserId;
		}

		_lastModifiedUserId = lastModifiedUserId;
	}

	@Override
	public String getLastModifiedUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getLastModifiedUserId());

			return user.getUuid();
		}
		catch (PortalException pe) {
			return "";
		}
	}

	@Override
	public void setLastModifiedUserUuid(String lastModifiedUserUuid) {
	}

	public long getOriginalLastModifiedUserId() {
		return _originalLastModifiedUserId;
	}

	@JSON
	@Override
	public long getAssignedUserId() {
		return _assignedUserId;
	}

	@Override
	public void setAssignedUserId(long assignedUserId) {
		_columnBitmask |= ASSIGNEDUSERID_COLUMN_BITMASK;

		if (!_setOriginalAssignedUserId) {
			_setOriginalAssignedUserId = true;

			_originalAssignedUserId = _assignedUserId;
		}

		_assignedUserId = assignedUserId;
	}

	@Override
	public String getAssignedUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getAssignedUserId());

			return user.getUuid();
		}
		catch (PortalException pe) {
			return "";
		}
	}

	@Override
	public void setAssignedUserUuid(String assignedUserUuid) {
	}

	public long getOriginalAssignedUserId() {
		return _originalAssignedUserId;
	}

	@JSON
	@Override
	public long getUserGroupId() {
		return _userGroupId;
	}

	@Override
	public void setUserGroupId(long userGroupId) {
		_userGroupId = userGroupId;
	}

	@JSON
	@Override
	public long getJournalFolderId() {
		return _journalFolderId;
	}

	@Override
	public void setJournalFolderId(long journalFolderId) {
		_journalFolderId = journalFolderId;
	}

	@JSON
	@Override
	public Date getDateCreated() {
		return _dateCreated;
	}

	@Override
	public void setDateCreated(Date dateCreated) {
		_dateCreated = dateCreated;
	}

	@JSON
	@Override
	public Date getDateModified() {
		return _dateModified;
	}

	@Override
	public void setDateModified(Date dateModified) {
		_dateModified = dateModified;
	}

	@JSON
	@Override
	public String getComments() {
		if (_comments == null) {
			return "";
		}
		else {
			return _comments;
		}
	}

	@Override
	public void setComments(String comments) {
		_comments = comments;
	}

	@JSON
	@Override
	public int getVisibility() {
		return _visibility;
	}

	@Override
	public void setVisibility(int visibility) {
		_visibility = visibility;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			Content.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Content toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (Content)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		ContentImpl contentImpl = new ContentImpl();

		contentImpl.setUuid(getUuid());
		contentImpl.setContentId(getContentId());
		contentImpl.setTitle(getTitle());
		contentImpl.setUrl(getUrl());
		contentImpl.setContentType(getContentType());
		contentImpl.setShortExcerpt(getShortExcerpt());
		contentImpl.setExcerpt(getExcerpt());
		contentImpl.setOriginalBodyHash(getOriginalBodyHash());
		contentImpl.setOriginalBody(getOriginalBody());
		contentImpl.setAreaId(getAreaId());
		contentImpl.setActionId(getActionId());
		contentImpl.setStatusId(getStatusId());
		contentImpl.setTemplateId(getTemplateId());
		contentImpl.setTags(getTags());
		contentImpl.setLastModifiedUserId(getLastModifiedUserId());
		contentImpl.setAssignedUserId(getAssignedUserId());
		contentImpl.setUserGroupId(getUserGroupId());
		contentImpl.setJournalFolderId(getJournalFolderId());
		contentImpl.setDateCreated(getDateCreated());
		contentImpl.setDateModified(getDateModified());
		contentImpl.setComments(getComments());
		contentImpl.setVisibility(getVisibility());

		contentImpl.resetOriginalValues();

		return contentImpl;
	}

	@Override
	public int compareTo(Content content) {
		long primaryKey = content.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof Content)) {
			return false;
		}

		Content content = (Content)obj;

		long primaryKey = content.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		ContentModelImpl contentModelImpl = this;

		contentModelImpl._originalUuid = contentModelImpl._uuid;

		contentModelImpl._originalUrl = contentModelImpl._url;

		contentModelImpl._originalAreaId = contentModelImpl._areaId;

		contentModelImpl._setOriginalAreaId = false;

		contentModelImpl._originalLastModifiedUserId = contentModelImpl._lastModifiedUserId;

		contentModelImpl._setOriginalLastModifiedUserId = false;

		contentModelImpl._originalAssignedUserId = contentModelImpl._assignedUserId;

		contentModelImpl._setOriginalAssignedUserId = false;

		contentModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<Content> toCacheModel() {
		ContentCacheModel contentCacheModel = new ContentCacheModel();

		contentCacheModel.uuid = getUuid();

		String uuid = contentCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			contentCacheModel.uuid = null;
		}

		contentCacheModel.contentId = getContentId();

		contentCacheModel.title = getTitle();

		String title = contentCacheModel.title;

		if ((title != null) && (title.length() == 0)) {
			contentCacheModel.title = null;
		}

		contentCacheModel.url = getUrl();

		String url = contentCacheModel.url;

		if ((url != null) && (url.length() == 0)) {
			contentCacheModel.url = null;
		}

		contentCacheModel.contentType = getContentType();

		String contentType = contentCacheModel.contentType;

		if ((contentType != null) && (contentType.length() == 0)) {
			contentCacheModel.contentType = null;
		}

		contentCacheModel.shortExcerpt = getShortExcerpt();

		String shortExcerpt = contentCacheModel.shortExcerpt;

		if ((shortExcerpt != null) && (shortExcerpt.length() == 0)) {
			contentCacheModel.shortExcerpt = null;
		}

		contentCacheModel.excerpt = getExcerpt();

		String excerpt = contentCacheModel.excerpt;

		if ((excerpt != null) && (excerpt.length() == 0)) {
			contentCacheModel.excerpt = null;
		}

		contentCacheModel.originalBodyHash = getOriginalBodyHash();

		String originalBodyHash = contentCacheModel.originalBodyHash;

		if ((originalBodyHash != null) && (originalBodyHash.length() == 0)) {
			contentCacheModel.originalBodyHash = null;
		}

		contentCacheModel.originalBody = getOriginalBody();

		String originalBody = contentCacheModel.originalBody;

		if ((originalBody != null) && (originalBody.length() == 0)) {
			contentCacheModel.originalBody = null;
		}

		contentCacheModel.areaId = getAreaId();

		contentCacheModel.actionId = getActionId();

		contentCacheModel.statusId = getStatusId();

		contentCacheModel.templateId = getTemplateId();

		contentCacheModel.tags = getTags();

		String tags = contentCacheModel.tags;

		if ((tags != null) && (tags.length() == 0)) {
			contentCacheModel.tags = null;
		}

		contentCacheModel.lastModifiedUserId = getLastModifiedUserId();

		contentCacheModel.assignedUserId = getAssignedUserId();

		contentCacheModel.userGroupId = getUserGroupId();

		contentCacheModel.journalFolderId = getJournalFolderId();

		Date dateCreated = getDateCreated();

		if (dateCreated != null) {
			contentCacheModel.dateCreated = dateCreated.getTime();
		}
		else {
			contentCacheModel.dateCreated = Long.MIN_VALUE;
		}

		Date dateModified = getDateModified();

		if (dateModified != null) {
			contentCacheModel.dateModified = dateModified.getTime();
		}
		else {
			contentCacheModel.dateModified = Long.MIN_VALUE;
		}

		contentCacheModel.comments = getComments();

		String comments = contentCacheModel.comments;

		if ((comments != null) && (comments.length() == 0)) {
			contentCacheModel.comments = null;
		}

		contentCacheModel.visibility = getVisibility();

		return contentCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(45);

		sb.append("{uuid=");
		sb.append(getUuid());
		sb.append(", contentId=");
		sb.append(getContentId());
		sb.append(", title=");
		sb.append(getTitle());
		sb.append(", url=");
		sb.append(getUrl());
		sb.append(", contentType=");
		sb.append(getContentType());
		sb.append(", shortExcerpt=");
		sb.append(getShortExcerpt());
		sb.append(", excerpt=");
		sb.append(getExcerpt());
		sb.append(", originalBodyHash=");
		sb.append(getOriginalBodyHash());
		sb.append(", originalBody=");
		sb.append(getOriginalBody());
		sb.append(", areaId=");
		sb.append(getAreaId());
		sb.append(", actionId=");
		sb.append(getActionId());
		sb.append(", statusId=");
		sb.append(getStatusId());
		sb.append(", templateId=");
		sb.append(getTemplateId());
		sb.append(", tags=");
		sb.append(getTags());
		sb.append(", lastModifiedUserId=");
		sb.append(getLastModifiedUserId());
		sb.append(", assignedUserId=");
		sb.append(getAssignedUserId());
		sb.append(", userGroupId=");
		sb.append(getUserGroupId());
		sb.append(", journalFolderId=");
		sb.append(getJournalFolderId());
		sb.append(", dateCreated=");
		sb.append(getDateCreated());
		sb.append(", dateModified=");
		sb.append(getDateModified());
		sb.append(", comments=");
		sb.append(getComments());
		sb.append(", visibility=");
		sb.append(getVisibility());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(70);

		sb.append("<model><model-name>");
		sb.append("es.aragon.base.migration.model.Content");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>uuid</column-name><column-value><![CDATA[");
		sb.append(getUuid());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>contentId</column-name><column-value><![CDATA[");
		sb.append(getContentId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>title</column-name><column-value><![CDATA[");
		sb.append(getTitle());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>url</column-name><column-value><![CDATA[");
		sb.append(getUrl());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>contentType</column-name><column-value><![CDATA[");
		sb.append(getContentType());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>shortExcerpt</column-name><column-value><![CDATA[");
		sb.append(getShortExcerpt());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>excerpt</column-name><column-value><![CDATA[");
		sb.append(getExcerpt());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>originalBodyHash</column-name><column-value><![CDATA[");
		sb.append(getOriginalBodyHash());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>originalBody</column-name><column-value><![CDATA[");
		sb.append(getOriginalBody());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>areaId</column-name><column-value><![CDATA[");
		sb.append(getAreaId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>actionId</column-name><column-value><![CDATA[");
		sb.append(getActionId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>statusId</column-name><column-value><![CDATA[");
		sb.append(getStatusId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>templateId</column-name><column-value><![CDATA[");
		sb.append(getTemplateId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>tags</column-name><column-value><![CDATA[");
		sb.append(getTags());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>lastModifiedUserId</column-name><column-value><![CDATA[");
		sb.append(getLastModifiedUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>assignedUserId</column-name><column-value><![CDATA[");
		sb.append(getAssignedUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userGroupId</column-name><column-value><![CDATA[");
		sb.append(getUserGroupId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>journalFolderId</column-name><column-value><![CDATA[");
		sb.append(getJournalFolderId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>dateCreated</column-name><column-value><![CDATA[");
		sb.append(getDateCreated());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>dateModified</column-name><column-value><![CDATA[");
		sb.append(getDateModified());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>comments</column-name><column-value><![CDATA[");
		sb.append(getComments());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>visibility</column-name><column-value><![CDATA[");
		sb.append(getVisibility());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = Content.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			Content.class, ModelWrapper.class
		};
	private String _uuid;
	private String _originalUuid;
	private long _contentId;
	private String _title;
	private String _url;
	private String _originalUrl;
	private String _contentType;
	private String _shortExcerpt;
	private String _excerpt;
	private String _originalBodyHash;
	private String _originalBody;
	private long _areaId;
	private long _originalAreaId;
	private boolean _setOriginalAreaId;
	private long _actionId;
	private long _statusId;
	private long _templateId;
	private String _tags;
	private long _lastModifiedUserId;
	private long _originalLastModifiedUserId;
	private boolean _setOriginalLastModifiedUserId;
	private long _assignedUserId;
	private long _originalAssignedUserId;
	private boolean _setOriginalAssignedUserId;
	private long _userGroupId;
	private long _journalFolderId;
	private Date _dateCreated;
	private Date _dateModified;
	private String _comments;
	private int _visibility;
	private long _columnBitmask;
	private Content _escapedModel;
}