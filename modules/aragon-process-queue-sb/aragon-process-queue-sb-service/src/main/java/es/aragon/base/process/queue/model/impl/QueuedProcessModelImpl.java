/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package es.aragon.base.process.queue.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.DateUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;

import es.aragon.base.process.queue.model.QueuedProcess;
import es.aragon.base.process.queue.model.QueuedProcessModel;
import es.aragon.base.process.queue.model.QueuedProcessSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the QueuedProcess service. Represents a row in the &quot;EAB_PQ_QueuedProcess&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link QueuedProcessModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link QueuedProcessImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see QueuedProcessImpl
 * @see QueuedProcess
 * @see QueuedProcessModel
 * @generated
 */
@JSON(strict = true)
@ProviderType
public class QueuedProcessModelImpl extends BaseModelImpl<QueuedProcess>
	implements QueuedProcessModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a queued process model instance should use the {@link QueuedProcess} interface instead.
	 */
	public static final String TABLE_NAME = "EAB_PQ_QueuedProcess";
	public static final Object[][] TABLE_COLUMNS = {
			{ "uuid_", Types.VARCHAR },
			{ "queuedProcessId", Types.BIGINT },
			{ "groupId", Types.BIGINT },
			{ "companyId", Types.BIGINT },
			{ "userId", Types.BIGINT },
			{ "userName", Types.VARCHAR },
			{ "createDate", Types.TIMESTAMP },
			{ "executionStartedDate", Types.TIMESTAMP },
			{ "executionFinishedDate", Types.TIMESTAMP },
			{ "processName", Types.VARCHAR },
			{ "jsonParameters", Types.VARCHAR },
			{ "status", Types.INTEGER }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("queuedProcessId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("executionStartedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("executionFinishedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("processName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("jsonParameters", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("status", Types.INTEGER);
	}

	public static final String TABLE_SQL_CREATE = "create table EAB_PQ_QueuedProcess (uuid_ VARCHAR(75) null,queuedProcessId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,executionStartedDate DATE null,executionFinishedDate DATE null,processName VARCHAR(75) null,jsonParameters STRING null,status INTEGER)";
	public static final String TABLE_SQL_DROP = "drop table EAB_PQ_QueuedProcess";
	public static final String ORDER_BY_JPQL = " ORDER BY queuedProcess.createDate DESC";
	public static final String ORDER_BY_SQL = " ORDER BY EAB_PQ_QueuedProcess.createDate DESC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(es.aragon.base.process.queue.service.util.ServiceProps.get(
				"value.object.entity.cache.enabled.es.aragon.base.process.queue.model.QueuedProcess"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(es.aragon.base.process.queue.service.util.ServiceProps.get(
				"value.object.finder.cache.enabled.es.aragon.base.process.queue.model.QueuedProcess"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(es.aragon.base.process.queue.service.util.ServiceProps.get(
				"value.object.column.bitmask.enabled.es.aragon.base.process.queue.model.QueuedProcess"),
			true);
	public static final long COMPANYID_COLUMN_BITMASK = 1L;
	public static final long GROUPID_COLUMN_BITMASK = 2L;
	public static final long PROCESSNAME_COLUMN_BITMASK = 4L;
	public static final long STATUS_COLUMN_BITMASK = 8L;
	public static final long UUID_COLUMN_BITMASK = 16L;
	public static final long CREATEDATE_COLUMN_BITMASK = 32L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static QueuedProcess toModel(QueuedProcessSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		QueuedProcess model = new QueuedProcessImpl();

		model.setUuid(soapModel.getUuid());
		model.setQueuedProcessId(soapModel.getQueuedProcessId());
		model.setGroupId(soapModel.getGroupId());
		model.setCompanyId(soapModel.getCompanyId());
		model.setUserId(soapModel.getUserId());
		model.setUserName(soapModel.getUserName());
		model.setCreateDate(soapModel.getCreateDate());
		model.setExecutionStartedDate(soapModel.getExecutionStartedDate());
		model.setExecutionFinishedDate(soapModel.getExecutionFinishedDate());
		model.setProcessName(soapModel.getProcessName());
		model.setJsonParameters(soapModel.getJsonParameters());
		model.setStatus(soapModel.getStatus());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<QueuedProcess> toModels(QueuedProcessSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<QueuedProcess> models = new ArrayList<QueuedProcess>(soapModels.length);

		for (QueuedProcessSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(es.aragon.base.process.queue.service.util.ServiceProps.get(
				"lock.expiration.time.es.aragon.base.process.queue.model.QueuedProcess"));

	public QueuedProcessModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _queuedProcessId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setQueuedProcessId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _queuedProcessId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return QueuedProcess.class;
	}

	@Override
	public String getModelClassName() {
		return QueuedProcess.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("uuid", getUuid());
		attributes.put("queuedProcessId", getQueuedProcessId());
		attributes.put("groupId", getGroupId());
		attributes.put("companyId", getCompanyId());
		attributes.put("userId", getUserId());
		attributes.put("userName", getUserName());
		attributes.put("createDate", getCreateDate());
		attributes.put("executionStartedDate", getExecutionStartedDate());
		attributes.put("executionFinishedDate", getExecutionFinishedDate());
		attributes.put("processName", getProcessName());
		attributes.put("jsonParameters", getJsonParameters());
		attributes.put("status", getStatus());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		String uuid = (String)attributes.get("uuid");

		if (uuid != null) {
			setUuid(uuid);
		}

		Long queuedProcessId = (Long)attributes.get("queuedProcessId");

		if (queuedProcessId != null) {
			setQueuedProcessId(queuedProcessId);
		}

		Long groupId = (Long)attributes.get("groupId");

		if (groupId != null) {
			setGroupId(groupId);
		}

		Long companyId = (Long)attributes.get("companyId");

		if (companyId != null) {
			setCompanyId(companyId);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		String userName = (String)attributes.get("userName");

		if (userName != null) {
			setUserName(userName);
		}

		Date createDate = (Date)attributes.get("createDate");

		if (createDate != null) {
			setCreateDate(createDate);
		}

		Date executionStartedDate = (Date)attributes.get("executionStartedDate");

		if (executionStartedDate != null) {
			setExecutionStartedDate(executionStartedDate);
		}

		Date executionFinishedDate = (Date)attributes.get(
				"executionFinishedDate");

		if (executionFinishedDate != null) {
			setExecutionFinishedDate(executionFinishedDate);
		}

		String processName = (String)attributes.get("processName");

		if (processName != null) {
			setProcessName(processName);
		}

		String jsonParameters = (String)attributes.get("jsonParameters");

		if (jsonParameters != null) {
			setJsonParameters(jsonParameters);
		}

		Integer status = (Integer)attributes.get("status");

		if (status != null) {
			setStatus(status);
		}
	}

	@JSON
	@Override
	public String getUuid() {
		if (_uuid == null) {
			return "";
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		if (_originalUuid == null) {
			_originalUuid = _uuid;
		}

		_uuid = uuid;
	}

	public String getOriginalUuid() {
		return GetterUtil.getString(_originalUuid);
	}

	@JSON
	@Override
	public long getQueuedProcessId() {
		return _queuedProcessId;
	}

	@Override
	public void setQueuedProcessId(long queuedProcessId) {
		_queuedProcessId = queuedProcessId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_columnBitmask |= GROUPID_COLUMN_BITMASK;

		if (!_setOriginalGroupId) {
			_setOriginalGroupId = true;

			_originalGroupId = _groupId;
		}

		_groupId = groupId;
	}

	public long getOriginalGroupId() {
		return _originalGroupId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_columnBitmask |= COMPANYID_COLUMN_BITMASK;

		if (!_setOriginalCompanyId) {
			_setOriginalCompanyId = true;

			_originalCompanyId = _companyId;
		}

		_companyId = companyId;
	}

	public long getOriginalCompanyId() {
		return _originalCompanyId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException pe) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_columnBitmask = -1L;

		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getExecutionStartedDate() {
		return _executionStartedDate;
	}

	@Override
	public void setExecutionStartedDate(Date executionStartedDate) {
		_executionStartedDate = executionStartedDate;
	}

	@JSON
	@Override
	public Date getExecutionFinishedDate() {
		return _executionFinishedDate;
	}

	@Override
	public void setExecutionFinishedDate(Date executionFinishedDate) {
		_executionFinishedDate = executionFinishedDate;
	}

	@JSON
	@Override
	public String getProcessName() {
		if (_processName == null) {
			return "";
		}
		else {
			return _processName;
		}
	}

	@Override
	public void setProcessName(String processName) {
		_columnBitmask |= PROCESSNAME_COLUMN_BITMASK;

		if (_originalProcessName == null) {
			_originalProcessName = _processName;
		}

		_processName = processName;
	}

	public String getOriginalProcessName() {
		return GetterUtil.getString(_originalProcessName);
	}

	@JSON
	@Override
	public String getJsonParameters() {
		if (_jsonParameters == null) {
			return "";
		}
		else {
			return _jsonParameters;
		}
	}

	@Override
	public void setJsonParameters(String jsonParameters) {
		_jsonParameters = jsonParameters;
	}

	@JSON
	@Override
	public int getStatus() {
		return _status;
	}

	@Override
	public void setStatus(int status) {
		_columnBitmask |= STATUS_COLUMN_BITMASK;

		if (!_setOriginalStatus) {
			_setOriginalStatus = true;

			_originalStatus = _status;
		}

		_status = status;
	}

	public int getOriginalStatus() {
		return _originalStatus;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
			QueuedProcess.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public QueuedProcess toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (QueuedProcess)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		QueuedProcessImpl queuedProcessImpl = new QueuedProcessImpl();

		queuedProcessImpl.setUuid(getUuid());
		queuedProcessImpl.setQueuedProcessId(getQueuedProcessId());
		queuedProcessImpl.setGroupId(getGroupId());
		queuedProcessImpl.setCompanyId(getCompanyId());
		queuedProcessImpl.setUserId(getUserId());
		queuedProcessImpl.setUserName(getUserName());
		queuedProcessImpl.setCreateDate(getCreateDate());
		queuedProcessImpl.setExecutionStartedDate(getExecutionStartedDate());
		queuedProcessImpl.setExecutionFinishedDate(getExecutionFinishedDate());
		queuedProcessImpl.setProcessName(getProcessName());
		queuedProcessImpl.setJsonParameters(getJsonParameters());
		queuedProcessImpl.setStatus(getStatus());

		queuedProcessImpl.resetOriginalValues();

		return queuedProcessImpl;
	}

	@Override
	public int compareTo(QueuedProcess queuedProcess) {
		int value = 0;

		value = DateUtil.compareTo(getCreateDate(),
				queuedProcess.getCreateDate());

		value = value * -1;

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof QueuedProcess)) {
			return false;
		}

		QueuedProcess queuedProcess = (QueuedProcess)obj;

		long primaryKey = queuedProcess.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		QueuedProcessModelImpl queuedProcessModelImpl = this;

		queuedProcessModelImpl._originalUuid = queuedProcessModelImpl._uuid;

		queuedProcessModelImpl._originalGroupId = queuedProcessModelImpl._groupId;

		queuedProcessModelImpl._setOriginalGroupId = false;

		queuedProcessModelImpl._originalCompanyId = queuedProcessModelImpl._companyId;

		queuedProcessModelImpl._setOriginalCompanyId = false;

		queuedProcessModelImpl._originalProcessName = queuedProcessModelImpl._processName;

		queuedProcessModelImpl._originalStatus = queuedProcessModelImpl._status;

		queuedProcessModelImpl._setOriginalStatus = false;

		queuedProcessModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<QueuedProcess> toCacheModel() {
		QueuedProcessCacheModel queuedProcessCacheModel = new QueuedProcessCacheModel();

		queuedProcessCacheModel.uuid = getUuid();

		String uuid = queuedProcessCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			queuedProcessCacheModel.uuid = null;
		}

		queuedProcessCacheModel.queuedProcessId = getQueuedProcessId();

		queuedProcessCacheModel.groupId = getGroupId();

		queuedProcessCacheModel.companyId = getCompanyId();

		queuedProcessCacheModel.userId = getUserId();

		queuedProcessCacheModel.userName = getUserName();

		String userName = queuedProcessCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			queuedProcessCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			queuedProcessCacheModel.createDate = createDate.getTime();
		}
		else {
			queuedProcessCacheModel.createDate = Long.MIN_VALUE;
		}

		Date executionStartedDate = getExecutionStartedDate();

		if (executionStartedDate != null) {
			queuedProcessCacheModel.executionStartedDate = executionStartedDate.getTime();
		}
		else {
			queuedProcessCacheModel.executionStartedDate = Long.MIN_VALUE;
		}

		Date executionFinishedDate = getExecutionFinishedDate();

		if (executionFinishedDate != null) {
			queuedProcessCacheModel.executionFinishedDate = executionFinishedDate.getTime();
		}
		else {
			queuedProcessCacheModel.executionFinishedDate = Long.MIN_VALUE;
		}

		queuedProcessCacheModel.processName = getProcessName();

		String processName = queuedProcessCacheModel.processName;

		if ((processName != null) && (processName.length() == 0)) {
			queuedProcessCacheModel.processName = null;
		}

		queuedProcessCacheModel.jsonParameters = getJsonParameters();

		String jsonParameters = queuedProcessCacheModel.jsonParameters;

		if ((jsonParameters != null) && (jsonParameters.length() == 0)) {
			queuedProcessCacheModel.jsonParameters = null;
		}

		queuedProcessCacheModel.status = getStatus();

		return queuedProcessCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(25);

		sb.append("{uuid=");
		sb.append(getUuid());
		sb.append(", queuedProcessId=");
		sb.append(getQueuedProcessId());
		sb.append(", groupId=");
		sb.append(getGroupId());
		sb.append(", companyId=");
		sb.append(getCompanyId());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", userName=");
		sb.append(getUserName());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append(", executionStartedDate=");
		sb.append(getExecutionStartedDate());
		sb.append(", executionFinishedDate=");
		sb.append(getExecutionFinishedDate());
		sb.append(", processName=");
		sb.append(getProcessName());
		sb.append(", jsonParameters=");
		sb.append(getJsonParameters());
		sb.append(", status=");
		sb.append(getStatus());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(40);

		sb.append("<model><model-name>");
		sb.append("es.aragon.base.process.queue.model.QueuedProcess");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>uuid</column-name><column-value><![CDATA[");
		sb.append(getUuid());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>queuedProcessId</column-name><column-value><![CDATA[");
		sb.append(getQueuedProcessId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>groupId</column-name><column-value><![CDATA[");
		sb.append(getGroupId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userName</column-name><column-value><![CDATA[");
		sb.append(getUserName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>executionStartedDate</column-name><column-value><![CDATA[");
		sb.append(getExecutionStartedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>executionFinishedDate</column-name><column-value><![CDATA[");
		sb.append(getExecutionFinishedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>processName</column-name><column-value><![CDATA[");
		sb.append(getProcessName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>jsonParameters</column-name><column-value><![CDATA[");
		sb.append(getJsonParameters());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>status</column-name><column-value><![CDATA[");
		sb.append(getStatus());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = QueuedProcess.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			QueuedProcess.class, ModelWrapper.class
		};
	private String _uuid;
	private String _originalUuid;
	private long _queuedProcessId;
	private long _groupId;
	private long _originalGroupId;
	private boolean _setOriginalGroupId;
	private long _companyId;
	private long _originalCompanyId;
	private boolean _setOriginalCompanyId;
	private long _userId;
	private String _userName;
	private Date _createDate;
	private Date _executionStartedDate;
	private Date _executionFinishedDate;
	private String _processName;
	private String _originalProcessName;
	private String _jsonParameters;
	private int _status;
	private int _originalStatus;
	private boolean _setOriginalStatus;
	private long _columnBitmask;
	private QueuedProcess _escapedModel;
}