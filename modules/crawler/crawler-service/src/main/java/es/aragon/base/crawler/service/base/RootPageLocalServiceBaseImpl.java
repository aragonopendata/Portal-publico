/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package es.aragon.base.crawler.service.base;

import aQute.bnd.annotation.ProviderType;

import com.liferay.portal.kernel.bean.BeanReference;
import com.liferay.portal.kernel.dao.db.DB;
import com.liferay.portal.kernel.dao.db.DBManagerUtil;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdate;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdateFactoryUtil;
import com.liferay.portal.kernel.dao.orm.ActionableDynamicQuery;
import com.liferay.portal.kernel.dao.orm.DefaultActionableDynamicQuery;
import com.liferay.portal.kernel.dao.orm.DynamicQuery;
import com.liferay.portal.kernel.dao.orm.DynamicQueryFactoryUtil;
import com.liferay.portal.kernel.dao.orm.IndexableActionableDynamicQuery;
import com.liferay.portal.kernel.dao.orm.Projection;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.model.PersistedModel;
import com.liferay.portal.kernel.module.framework.service.IdentifiableOSGiService;
import com.liferay.portal.kernel.search.Indexable;
import com.liferay.portal.kernel.search.IndexableType;
import com.liferay.portal.kernel.service.BaseLocalServiceImpl;
import com.liferay.portal.kernel.service.PersistedModelLocalServiceRegistry;
import com.liferay.portal.kernel.service.persistence.ClassNamePersistence;
import com.liferay.portal.kernel.service.persistence.UserPersistence;
import com.liferay.portal.kernel.transaction.Transactional;
import com.liferay.portal.kernel.util.OrderByComparator;
import com.liferay.portal.kernel.util.PortalUtil;
import com.liferay.portal.spring.extender.service.ServiceReference;

import es.aragon.base.crawler.model.RootPage;
import es.aragon.base.crawler.service.RootPageLocalService;
import es.aragon.base.crawler.service.persistence.PagePersistence;
import es.aragon.base.crawler.service.persistence.RootPagePersistence;

import java.io.Serializable;

import java.util.List;

import javax.sql.DataSource;

/**
 * Provides the base implementation for the root page local service.
 *
 * <p>
 * This implementation exists only as a container for the default service methods generated by ServiceBuilder. All custom service methods should be put in {@link es.aragon.base.crawler.service.impl.RootPageLocalServiceImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see es.aragon.base.crawler.service.impl.RootPageLocalServiceImpl
 * @see es.aragon.base.crawler.service.RootPageLocalServiceUtil
 * @generated
 */
@ProviderType
public abstract class RootPageLocalServiceBaseImpl extends BaseLocalServiceImpl
	implements RootPageLocalService, IdentifiableOSGiService {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. Always use {@link es.aragon.base.crawler.service.RootPageLocalServiceUtil} to access the root page local service.
	 */

	/**
	 * Adds the root page to the database. Also notifies the appropriate model listeners.
	 *
	 * @param rootPage the root page
	 * @return the root page that was added
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public RootPage addRootPage(RootPage rootPage) {
		rootPage.setNew(true);

		return rootPagePersistence.update(rootPage);
	}

	/**
	 * Creates a new root page with the primary key. Does not add the root page to the database.
	 *
	 * @param rootPageId the primary key for the new root page
	 * @return the new root page
	 */
	@Override
	@Transactional(enabled = false)
	public RootPage createRootPage(long rootPageId) {
		return rootPagePersistence.create(rootPageId);
	}

	/**
	 * Deletes the root page with the primary key from the database. Also notifies the appropriate model listeners.
	 *
	 * @param rootPageId the primary key of the root page
	 * @return the root page that was removed
	 * @throws PortalException if a root page with the primary key could not be found
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public RootPage deleteRootPage(long rootPageId) throws PortalException {
		return rootPagePersistence.remove(rootPageId);
	}

	/**
	 * Deletes the root page from the database. Also notifies the appropriate model listeners.
	 *
	 * @param rootPage the root page
	 * @return the root page that was removed
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public RootPage deleteRootPage(RootPage rootPage) {
		return rootPagePersistence.remove(rootPage);
	}

	@Override
	public DynamicQuery dynamicQuery() {
		Class<?> clazz = getClass();

		return DynamicQueryFactoryUtil.forClass(RootPage.class,
			clazz.getClassLoader());
	}

	/**
	 * Performs a dynamic query on the database and returns the matching rows.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the matching rows
	 */
	@Override
	public <T> List<T> dynamicQuery(DynamicQuery dynamicQuery) {
		return rootPagePersistence.findWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Performs a dynamic query on the database and returns a range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link es.aragon.base.crawler.model.impl.RootPageModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @return the range of matching rows
	 */
	@Override
	public <T> List<T> dynamicQuery(DynamicQuery dynamicQuery, int start,
		int end) {
		return rootPagePersistence.findWithDynamicQuery(dynamicQuery, start, end);
	}

	/**
	 * Performs a dynamic query on the database and returns an ordered range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link es.aragon.base.crawler.model.impl.RootPageModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @param orderByComparator the comparator to order the results by (optionally <code>null</code>)
	 * @return the ordered range of matching rows
	 */
	@Override
	public <T> List<T> dynamicQuery(DynamicQuery dynamicQuery, int start,
		int end, OrderByComparator<T> orderByComparator) {
		return rootPagePersistence.findWithDynamicQuery(dynamicQuery, start,
			end, orderByComparator);
	}

	/**
	 * Returns the number of rows matching the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the number of rows matching the dynamic query
	 */
	@Override
	public long dynamicQueryCount(DynamicQuery dynamicQuery) {
		return rootPagePersistence.countWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Returns the number of rows matching the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @param projection the projection to apply to the query
	 * @return the number of rows matching the dynamic query
	 */
	@Override
	public long dynamicQueryCount(DynamicQuery dynamicQuery,
		Projection projection) {
		return rootPagePersistence.countWithDynamicQuery(dynamicQuery,
			projection);
	}

	@Override
	public RootPage fetchRootPage(long rootPageId) {
		return rootPagePersistence.fetchByPrimaryKey(rootPageId);
	}

	/**
	 * Returns the root page matching the UUID and group.
	 *
	 * @param uuid the root page's UUID
	 * @param groupId the primary key of the group
	 * @return the matching root page, or <code>null</code> if a matching root page could not be found
	 */
	@Override
	public RootPage fetchRootPageByUuidAndGroupId(String uuid, long groupId) {
		return rootPagePersistence.fetchByUUID_G(uuid, groupId);
	}

	/**
	 * Returns the root page with the primary key.
	 *
	 * @param rootPageId the primary key of the root page
	 * @return the root page
	 * @throws PortalException if a root page with the primary key could not be found
	 */
	@Override
	public RootPage getRootPage(long rootPageId) throws PortalException {
		return rootPagePersistence.findByPrimaryKey(rootPageId);
	}

	@Override
	public ActionableDynamicQuery getActionableDynamicQuery() {
		ActionableDynamicQuery actionableDynamicQuery = new DefaultActionableDynamicQuery();

		actionableDynamicQuery.setBaseLocalService(rootPageLocalService);
		actionableDynamicQuery.setClassLoader(getClassLoader());
		actionableDynamicQuery.setModelClass(RootPage.class);

		actionableDynamicQuery.setPrimaryKeyPropertyName("rootPageId");

		return actionableDynamicQuery;
	}

	@Override
	public IndexableActionableDynamicQuery getIndexableActionableDynamicQuery() {
		IndexableActionableDynamicQuery indexableActionableDynamicQuery = new IndexableActionableDynamicQuery();

		indexableActionableDynamicQuery.setBaseLocalService(rootPageLocalService);
		indexableActionableDynamicQuery.setClassLoader(getClassLoader());
		indexableActionableDynamicQuery.setModelClass(RootPage.class);

		indexableActionableDynamicQuery.setPrimaryKeyPropertyName("rootPageId");

		return indexableActionableDynamicQuery;
	}

	protected void initActionableDynamicQuery(
		ActionableDynamicQuery actionableDynamicQuery) {
		actionableDynamicQuery.setBaseLocalService(rootPageLocalService);
		actionableDynamicQuery.setClassLoader(getClassLoader());
		actionableDynamicQuery.setModelClass(RootPage.class);

		actionableDynamicQuery.setPrimaryKeyPropertyName("rootPageId");
	}

	/**
	 * @throws PortalException
	 */
	@Override
	public PersistedModel deletePersistedModel(PersistedModel persistedModel)
		throws PortalException {
		return rootPageLocalService.deleteRootPage((RootPage)persistedModel);
	}

	@Override
	public PersistedModel getPersistedModel(Serializable primaryKeyObj)
		throws PortalException {
		return rootPagePersistence.findByPrimaryKey(primaryKeyObj);
	}

	/**
	 * Returns all the root pages matching the UUID and company.
	 *
	 * @param uuid the UUID of the root pages
	 * @param companyId the primary key of the company
	 * @return the matching root pages, or an empty list if no matches were found
	 */
	@Override
	public List<RootPage> getRootPagesByUuidAndCompanyId(String uuid,
		long companyId) {
		return rootPagePersistence.findByUuid_C(uuid, companyId);
	}

	/**
	 * Returns a range of root pages matching the UUID and company.
	 *
	 * @param uuid the UUID of the root pages
	 * @param companyId the primary key of the company
	 * @param start the lower bound of the range of root pages
	 * @param end the upper bound of the range of root pages (not inclusive)
	 * @param orderByComparator the comparator to order the results by (optionally <code>null</code>)
	 * @return the range of matching root pages, or an empty list if no matches were found
	 */
	@Override
	public List<RootPage> getRootPagesByUuidAndCompanyId(String uuid,
		long companyId, int start, int end,
		OrderByComparator<RootPage> orderByComparator) {
		return rootPagePersistence.findByUuid_C(uuid, companyId, start, end,
			orderByComparator);
	}

	/**
	 * Returns the root page matching the UUID and group.
	 *
	 * @param uuid the root page's UUID
	 * @param groupId the primary key of the group
	 * @return the matching root page
	 * @throws PortalException if a matching root page could not be found
	 */
	@Override
	public RootPage getRootPageByUuidAndGroupId(String uuid, long groupId)
		throws PortalException {
		return rootPagePersistence.findByUUID_G(uuid, groupId);
	}

	/**
	 * Returns a range of all the root pages.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link es.aragon.base.crawler.model.impl.RootPageModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param start the lower bound of the range of root pages
	 * @param end the upper bound of the range of root pages (not inclusive)
	 * @return the range of root pages
	 */
	@Override
	public List<RootPage> getRootPages(int start, int end) {
		return rootPagePersistence.findAll(start, end);
	}

	/**
	 * Returns the number of root pages.
	 *
	 * @return the number of root pages
	 */
	@Override
	public int getRootPagesCount() {
		return rootPagePersistence.countAll();
	}

	/**
	 * Updates the root page in the database or adds it if it does not yet exist. Also notifies the appropriate model listeners.
	 *
	 * @param rootPage the root page
	 * @return the root page that was updated
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public RootPage updateRootPage(RootPage rootPage) {
		return rootPagePersistence.update(rootPage);
	}

	/**
	 * Returns the page local service.
	 *
	 * @return the page local service
	 */
	public es.aragon.base.crawler.service.PageLocalService getPageLocalService() {
		return pageLocalService;
	}

	/**
	 * Sets the page local service.
	 *
	 * @param pageLocalService the page local service
	 */
	public void setPageLocalService(
		es.aragon.base.crawler.service.PageLocalService pageLocalService) {
		this.pageLocalService = pageLocalService;
	}

	/**
	 * Returns the page persistence.
	 *
	 * @return the page persistence
	 */
	public PagePersistence getPagePersistence() {
		return pagePersistence;
	}

	/**
	 * Sets the page persistence.
	 *
	 * @param pagePersistence the page persistence
	 */
	public void setPagePersistence(PagePersistence pagePersistence) {
		this.pagePersistence = pagePersistence;
	}

	/**
	 * Returns the root page local service.
	 *
	 * @return the root page local service
	 */
	public RootPageLocalService getRootPageLocalService() {
		return rootPageLocalService;
	}

	/**
	 * Sets the root page local service.
	 *
	 * @param rootPageLocalService the root page local service
	 */
	public void setRootPageLocalService(
		RootPageLocalService rootPageLocalService) {
		this.rootPageLocalService = rootPageLocalService;
	}

	/**
	 * Returns the root page persistence.
	 *
	 * @return the root page persistence
	 */
	public RootPagePersistence getRootPagePersistence() {
		return rootPagePersistence;
	}

	/**
	 * Sets the root page persistence.
	 *
	 * @param rootPagePersistence the root page persistence
	 */
	public void setRootPagePersistence(RootPagePersistence rootPagePersistence) {
		this.rootPagePersistence = rootPagePersistence;
	}

	/**
	 * Returns the counter local service.
	 *
	 * @return the counter local service
	 */
	public com.liferay.counter.kernel.service.CounterLocalService getCounterLocalService() {
		return counterLocalService;
	}

	/**
	 * Sets the counter local service.
	 *
	 * @param counterLocalService the counter local service
	 */
	public void setCounterLocalService(
		com.liferay.counter.kernel.service.CounterLocalService counterLocalService) {
		this.counterLocalService = counterLocalService;
	}

	/**
	 * Returns the class name local service.
	 *
	 * @return the class name local service
	 */
	public com.liferay.portal.kernel.service.ClassNameLocalService getClassNameLocalService() {
		return classNameLocalService;
	}

	/**
	 * Sets the class name local service.
	 *
	 * @param classNameLocalService the class name local service
	 */
	public void setClassNameLocalService(
		com.liferay.portal.kernel.service.ClassNameLocalService classNameLocalService) {
		this.classNameLocalService = classNameLocalService;
	}

	/**
	 * Returns the class name persistence.
	 *
	 * @return the class name persistence
	 */
	public ClassNamePersistence getClassNamePersistence() {
		return classNamePersistence;
	}

	/**
	 * Sets the class name persistence.
	 *
	 * @param classNamePersistence the class name persistence
	 */
	public void setClassNamePersistence(
		ClassNamePersistence classNamePersistence) {
		this.classNamePersistence = classNamePersistence;
	}

	/**
	 * Returns the resource local service.
	 *
	 * @return the resource local service
	 */
	public com.liferay.portal.kernel.service.ResourceLocalService getResourceLocalService() {
		return resourceLocalService;
	}

	/**
	 * Sets the resource local service.
	 *
	 * @param resourceLocalService the resource local service
	 */
	public void setResourceLocalService(
		com.liferay.portal.kernel.service.ResourceLocalService resourceLocalService) {
		this.resourceLocalService = resourceLocalService;
	}

	/**
	 * Returns the user local service.
	 *
	 * @return the user local service
	 */
	public com.liferay.portal.kernel.service.UserLocalService getUserLocalService() {
		return userLocalService;
	}

	/**
	 * Sets the user local service.
	 *
	 * @param userLocalService the user local service
	 */
	public void setUserLocalService(
		com.liferay.portal.kernel.service.UserLocalService userLocalService) {
		this.userLocalService = userLocalService;
	}

	/**
	 * Returns the user persistence.
	 *
	 * @return the user persistence
	 */
	public UserPersistence getUserPersistence() {
		return userPersistence;
	}

	/**
	 * Sets the user persistence.
	 *
	 * @param userPersistence the user persistence
	 */
	public void setUserPersistence(UserPersistence userPersistence) {
		this.userPersistence = userPersistence;
	}

	public void afterPropertiesSet() {
		persistedModelLocalServiceRegistry.register("es.aragon.base.crawler.model.RootPage",
			rootPageLocalService);
	}

	public void destroy() {
		persistedModelLocalServiceRegistry.unregister(
			"es.aragon.base.crawler.model.RootPage");
	}

	/**
	 * Returns the OSGi service identifier.
	 *
	 * @return the OSGi service identifier
	 */
	@Override
	public String getOSGiServiceIdentifier() {
		return RootPageLocalService.class.getName();
	}

	protected Class<?> getModelClass() {
		return RootPage.class;
	}

	protected String getModelClassName() {
		return RootPage.class.getName();
	}

	/**
	 * Performs a SQL query.
	 *
	 * @param sql the sql query
	 */
	protected void runSQL(String sql) {
		try {
			DataSource dataSource = rootPagePersistence.getDataSource();

			DB db = DBManagerUtil.getDB();

			sql = db.buildSQL(sql);
			sql = PortalUtil.transformSQL(sql);

			SqlUpdate sqlUpdate = SqlUpdateFactoryUtil.getSqlUpdate(dataSource,
					sql);

			sqlUpdate.update();
		}
		catch (Exception e) {
			throw new SystemException(e);
		}
	}

	@BeanReference(type = es.aragon.base.crawler.service.PageLocalService.class)
	protected es.aragon.base.crawler.service.PageLocalService pageLocalService;
	@BeanReference(type = PagePersistence.class)
	protected PagePersistence pagePersistence;
	@BeanReference(type = RootPageLocalService.class)
	protected RootPageLocalService rootPageLocalService;
	@BeanReference(type = RootPagePersistence.class)
	protected RootPagePersistence rootPagePersistence;
	@ServiceReference(type = com.liferay.counter.kernel.service.CounterLocalService.class)
	protected com.liferay.counter.kernel.service.CounterLocalService counterLocalService;
	@ServiceReference(type = com.liferay.portal.kernel.service.ClassNameLocalService.class)
	protected com.liferay.portal.kernel.service.ClassNameLocalService classNameLocalService;
	@ServiceReference(type = ClassNamePersistence.class)
	protected ClassNamePersistence classNamePersistence;
	@ServiceReference(type = com.liferay.portal.kernel.service.ResourceLocalService.class)
	protected com.liferay.portal.kernel.service.ResourceLocalService resourceLocalService;
	@ServiceReference(type = com.liferay.portal.kernel.service.UserLocalService.class)
	protected com.liferay.portal.kernel.service.UserLocalService userLocalService;
	@ServiceReference(type = UserPersistence.class)
	protected UserPersistence userPersistence;
	@ServiceReference(type = PersistedModelLocalServiceRegistry.class)
	protected PersistedModelLocalServiceRegistry persistedModelLocalServiceRegistry;
}