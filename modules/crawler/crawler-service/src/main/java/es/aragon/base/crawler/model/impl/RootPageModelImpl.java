/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package es.aragon.base.crawler.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;

import es.aragon.base.crawler.model.RootPage;
import es.aragon.base.crawler.model.RootPageModel;
import es.aragon.base.crawler.model.RootPageSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the RootPage service. Represents a row in the &quot;EAB_CRAWLER_RootPage&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link RootPageModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link RootPageImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see RootPageImpl
 * @see RootPage
 * @see RootPageModel
 * @generated
 */
@JSON(strict = true)
@ProviderType
public class RootPageModelImpl extends BaseModelImpl<RootPage>
	implements RootPageModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a root page model instance should use the {@link RootPage} interface instead.
	 */
	public static final String TABLE_NAME = "EAB_CRAWLER_RootPage";
	public static final Object[][] TABLE_COLUMNS = {
			{ "uuid_", Types.VARCHAR },
			{ "rootPageId", Types.BIGINT },
			{ "groupId", Types.BIGINT },
			{ "companyId", Types.BIGINT },
			{ "crawledDate", Types.TIMESTAMP },
			{ "alias_", Types.VARCHAR },
			{ "inclusionRules", Types.VARCHAR },
			{ "pageId", Types.BIGINT },
			{ "scheduledCrawl", Types.BOOLEAN },
			{ "depth", Types.INTEGER }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("rootPageId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("crawledDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("alias_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("inclusionRules", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("pageId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("scheduledCrawl", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("depth", Types.INTEGER);
	}

	public static final String TABLE_SQL_CREATE = "create table EAB_CRAWLER_RootPage (uuid_ VARCHAR(75) null,rootPageId LONG not null primary key,groupId LONG,companyId LONG,crawledDate DATE null,alias_ VARCHAR(75) null,inclusionRules VARCHAR(75) null,pageId LONG,scheduledCrawl BOOLEAN,depth INTEGER)";
	public static final String TABLE_SQL_DROP = "drop table EAB_CRAWLER_RootPage";
	public static final String ORDER_BY_JPQL = " ORDER BY rootPage.rootPageId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY EAB_CRAWLER_RootPage.rootPageId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(es.aragon.base.crawler.service.util.ServiceProps.get(
				"value.object.entity.cache.enabled.es.aragon.base.crawler.model.RootPage"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(es.aragon.base.crawler.service.util.ServiceProps.get(
				"value.object.finder.cache.enabled.es.aragon.base.crawler.model.RootPage"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(es.aragon.base.crawler.service.util.ServiceProps.get(
				"value.object.column.bitmask.enabled.es.aragon.base.crawler.model.RootPage"),
			true);
	public static final long COMPANYID_COLUMN_BITMASK = 1L;
	public static final long GROUPID_COLUMN_BITMASK = 2L;
	public static final long ROOTPAGEID_COLUMN_BITMASK = 4L;
	public static final long UUID_COLUMN_BITMASK = 8L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static RootPage toModel(RootPageSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		RootPage model = new RootPageImpl();

		model.setUuid(soapModel.getUuid());
		model.setRootPageId(soapModel.getRootPageId());
		model.setGroupId(soapModel.getGroupId());
		model.setCompanyId(soapModel.getCompanyId());
		model.setCrawledDate(soapModel.getCrawledDate());
		model.setAlias(soapModel.getAlias());
		model.setInclusionRules(soapModel.getInclusionRules());
		model.setPageId(soapModel.getPageId());
		model.setScheduledCrawl(soapModel.isScheduledCrawl());
		model.setDepth(soapModel.getDepth());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<RootPage> toModels(RootPageSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<RootPage> models = new ArrayList<RootPage>(soapModels.length);

		for (RootPageSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(es.aragon.base.crawler.service.util.ServiceProps.get(
				"lock.expiration.time.es.aragon.base.crawler.model.RootPage"));

	public RootPageModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _rootPageId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setRootPageId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _rootPageId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return RootPage.class;
	}

	@Override
	public String getModelClassName() {
		return RootPage.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("uuid", getUuid());
		attributes.put("rootPageId", getRootPageId());
		attributes.put("groupId", getGroupId());
		attributes.put("companyId", getCompanyId());
		attributes.put("crawledDate", getCrawledDate());
		attributes.put("alias", getAlias());
		attributes.put("inclusionRules", getInclusionRules());
		attributes.put("pageId", getPageId());
		attributes.put("scheduledCrawl", isScheduledCrawl());
		attributes.put("depth", getDepth());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		String uuid = (String)attributes.get("uuid");

		if (uuid != null) {
			setUuid(uuid);
		}

		Long rootPageId = (Long)attributes.get("rootPageId");

		if (rootPageId != null) {
			setRootPageId(rootPageId);
		}

		Long groupId = (Long)attributes.get("groupId");

		if (groupId != null) {
			setGroupId(groupId);
		}

		Long companyId = (Long)attributes.get("companyId");

		if (companyId != null) {
			setCompanyId(companyId);
		}

		Date crawledDate = (Date)attributes.get("crawledDate");

		if (crawledDate != null) {
			setCrawledDate(crawledDate);
		}

		String alias = (String)attributes.get("alias");

		if (alias != null) {
			setAlias(alias);
		}

		String inclusionRules = (String)attributes.get("inclusionRules");

		if (inclusionRules != null) {
			setInclusionRules(inclusionRules);
		}

		Long pageId = (Long)attributes.get("pageId");

		if (pageId != null) {
			setPageId(pageId);
		}

		Boolean scheduledCrawl = (Boolean)attributes.get("scheduledCrawl");

		if (scheduledCrawl != null) {
			setScheduledCrawl(scheduledCrawl);
		}

		Integer depth = (Integer)attributes.get("depth");

		if (depth != null) {
			setDepth(depth);
		}
	}

	@JSON
	@Override
	public String getUuid() {
		if (_uuid == null) {
			return "";
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		if (_originalUuid == null) {
			_originalUuid = _uuid;
		}

		_uuid = uuid;
	}

	public String getOriginalUuid() {
		return GetterUtil.getString(_originalUuid);
	}

	@JSON
	@Override
	public long getRootPageId() {
		return _rootPageId;
	}

	@Override
	public void setRootPageId(long rootPageId) {
		_columnBitmask = -1L;

		if (!_setOriginalRootPageId) {
			_setOriginalRootPageId = true;

			_originalRootPageId = _rootPageId;
		}

		_rootPageId = rootPageId;
	}

	public long getOriginalRootPageId() {
		return _originalRootPageId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_columnBitmask |= GROUPID_COLUMN_BITMASK;

		if (!_setOriginalGroupId) {
			_setOriginalGroupId = true;

			_originalGroupId = _groupId;
		}

		_groupId = groupId;
	}

	public long getOriginalGroupId() {
		return _originalGroupId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_columnBitmask |= COMPANYID_COLUMN_BITMASK;

		if (!_setOriginalCompanyId) {
			_setOriginalCompanyId = true;

			_originalCompanyId = _companyId;
		}

		_companyId = companyId;
	}

	public long getOriginalCompanyId() {
		return _originalCompanyId;
	}

	@JSON
	@Override
	public Date getCrawledDate() {
		return _crawledDate;
	}

	@Override
	public void setCrawledDate(Date crawledDate) {
		_crawledDate = crawledDate;
	}

	@JSON
	@Override
	public String getAlias() {
		if (_alias == null) {
			return "";
		}
		else {
			return _alias;
		}
	}

	@Override
	public void setAlias(String alias) {
		_alias = alias;
	}

	@JSON
	@Override
	public String getInclusionRules() {
		if (_inclusionRules == null) {
			return "";
		}
		else {
			return _inclusionRules;
		}
	}

	@Override
	public void setInclusionRules(String inclusionRules) {
		_inclusionRules = inclusionRules;
	}

	@JSON
	@Override
	public long getPageId() {
		return _pageId;
	}

	@Override
	public void setPageId(long pageId) {
		_pageId = pageId;
	}

	@JSON
	@Override
	public boolean getScheduledCrawl() {
		return _scheduledCrawl;
	}

	@JSON
	@Override
	public boolean isScheduledCrawl() {
		return _scheduledCrawl;
	}

	@Override
	public void setScheduledCrawl(boolean scheduledCrawl) {
		_scheduledCrawl = scheduledCrawl;
	}

	@JSON
	@Override
	public int getDepth() {
		return _depth;
	}

	@Override
	public void setDepth(int depth) {
		_depth = depth;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
			RootPage.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public RootPage toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (RootPage)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		RootPageImpl rootPageImpl = new RootPageImpl();

		rootPageImpl.setUuid(getUuid());
		rootPageImpl.setRootPageId(getRootPageId());
		rootPageImpl.setGroupId(getGroupId());
		rootPageImpl.setCompanyId(getCompanyId());
		rootPageImpl.setCrawledDate(getCrawledDate());
		rootPageImpl.setAlias(getAlias());
		rootPageImpl.setInclusionRules(getInclusionRules());
		rootPageImpl.setPageId(getPageId());
		rootPageImpl.setScheduledCrawl(isScheduledCrawl());
		rootPageImpl.setDepth(getDepth());

		rootPageImpl.resetOriginalValues();

		return rootPageImpl;
	}

	@Override
	public int compareTo(RootPage rootPage) {
		int value = 0;

		if (getRootPageId() < rootPage.getRootPageId()) {
			value = -1;
		}
		else if (getRootPageId() > rootPage.getRootPageId()) {
			value = 1;
		}
		else {
			value = 0;
		}

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof RootPage)) {
			return false;
		}

		RootPage rootPage = (RootPage)obj;

		long primaryKey = rootPage.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		RootPageModelImpl rootPageModelImpl = this;

		rootPageModelImpl._originalUuid = rootPageModelImpl._uuid;

		rootPageModelImpl._originalRootPageId = rootPageModelImpl._rootPageId;

		rootPageModelImpl._setOriginalRootPageId = false;

		rootPageModelImpl._originalGroupId = rootPageModelImpl._groupId;

		rootPageModelImpl._setOriginalGroupId = false;

		rootPageModelImpl._originalCompanyId = rootPageModelImpl._companyId;

		rootPageModelImpl._setOriginalCompanyId = false;

		rootPageModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<RootPage> toCacheModel() {
		RootPageCacheModel rootPageCacheModel = new RootPageCacheModel();

		rootPageCacheModel.uuid = getUuid();

		String uuid = rootPageCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			rootPageCacheModel.uuid = null;
		}

		rootPageCacheModel.rootPageId = getRootPageId();

		rootPageCacheModel.groupId = getGroupId();

		rootPageCacheModel.companyId = getCompanyId();

		Date crawledDate = getCrawledDate();

		if (crawledDate != null) {
			rootPageCacheModel.crawledDate = crawledDate.getTime();
		}
		else {
			rootPageCacheModel.crawledDate = Long.MIN_VALUE;
		}

		rootPageCacheModel.alias = getAlias();

		String alias = rootPageCacheModel.alias;

		if ((alias != null) && (alias.length() == 0)) {
			rootPageCacheModel.alias = null;
		}

		rootPageCacheModel.inclusionRules = getInclusionRules();

		String inclusionRules = rootPageCacheModel.inclusionRules;

		if ((inclusionRules != null) && (inclusionRules.length() == 0)) {
			rootPageCacheModel.inclusionRules = null;
		}

		rootPageCacheModel.pageId = getPageId();

		rootPageCacheModel.scheduledCrawl = isScheduledCrawl();

		rootPageCacheModel.depth = getDepth();

		return rootPageCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(21);

		sb.append("{uuid=");
		sb.append(getUuid());
		sb.append(", rootPageId=");
		sb.append(getRootPageId());
		sb.append(", groupId=");
		sb.append(getGroupId());
		sb.append(", companyId=");
		sb.append(getCompanyId());
		sb.append(", crawledDate=");
		sb.append(getCrawledDate());
		sb.append(", alias=");
		sb.append(getAlias());
		sb.append(", inclusionRules=");
		sb.append(getInclusionRules());
		sb.append(", pageId=");
		sb.append(getPageId());
		sb.append(", scheduledCrawl=");
		sb.append(isScheduledCrawl());
		sb.append(", depth=");
		sb.append(getDepth());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(34);

		sb.append("<model><model-name>");
		sb.append("es.aragon.base.crawler.model.RootPage");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>uuid</column-name><column-value><![CDATA[");
		sb.append(getUuid());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>rootPageId</column-name><column-value><![CDATA[");
		sb.append(getRootPageId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>groupId</column-name><column-value><![CDATA[");
		sb.append(getGroupId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>crawledDate</column-name><column-value><![CDATA[");
		sb.append(getCrawledDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>alias</column-name><column-value><![CDATA[");
		sb.append(getAlias());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>inclusionRules</column-name><column-value><![CDATA[");
		sb.append(getInclusionRules());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>pageId</column-name><column-value><![CDATA[");
		sb.append(getPageId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>scheduledCrawl</column-name><column-value><![CDATA[");
		sb.append(isScheduledCrawl());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>depth</column-name><column-value><![CDATA[");
		sb.append(getDepth());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = RootPage.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			RootPage.class, ModelWrapper.class
		};
	private String _uuid;
	private String _originalUuid;
	private long _rootPageId;
	private long _originalRootPageId;
	private boolean _setOriginalRootPageId;
	private long _groupId;
	private long _originalGroupId;
	private boolean _setOriginalGroupId;
	private long _companyId;
	private long _originalCompanyId;
	private boolean _setOriginalCompanyId;
	private Date _crawledDate;
	private String _alias;
	private String _inclusionRules;
	private long _pageId;
	private boolean _scheduledCrawl;
	private int _depth;
	private long _columnBitmask;
	private RootPage _escapedModel;
}