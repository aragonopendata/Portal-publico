/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package es.aragon.base.crawler.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;

import es.aragon.base.crawler.model.Page;
import es.aragon.base.crawler.model.PageModel;
import es.aragon.base.crawler.model.PageSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the Page service. Represents a row in the &quot;EAB_CRAWLER_Page&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link PageModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link PageImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see PageImpl
 * @see Page
 * @see PageModel
 * @generated
 */
@JSON(strict = true)
@ProviderType
public class PageModelImpl extends BaseModelImpl<Page> implements PageModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a page model instance should use the {@link Page} interface instead.
	 */
	public static final String TABLE_NAME = "EAB_CRAWLER_Page";
	public static final Object[][] TABLE_COLUMNS = {
			{ "uuid_", Types.VARCHAR },
			{ "pageId", Types.BIGINT },
			{ "title", Types.VARCHAR },
			{ "contentType", Types.VARCHAR },
			{ "metaDescription", Types.VARCHAR },
			{ "metaKeywords", Types.VARCHAR },
			{ "content", Types.VARCHAR },
			{ "url", Types.VARCHAR },
			{ "categoryIds", Types.VARCHAR },
			{ "rootPageId", Types.BIGINT },
			{ "parentPageId", Types.BIGINT },
			{ "status", Types.BIGINT }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("pageId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("title", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("contentType", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("metaDescription", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("metaKeywords", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("content", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("url", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("categoryIds", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("rootPageId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("parentPageId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("status", Types.BIGINT);
	}

	public static final String TABLE_SQL_CREATE = "create table EAB_CRAWLER_Page (uuid_ VARCHAR(75) null,pageId LONG not null primary key,title VARCHAR(1000) null,contentType VARCHAR(1000) null,metaDescription VARCHAR(1000) null,metaKeywords VARCHAR(1000) null,content TEXT null,url VARCHAR(1000) null,categoryIds VARCHAR(1000) null,rootPageId LONG,parentPageId LONG,status LONG)";
	public static final String TABLE_SQL_DROP = "drop table EAB_CRAWLER_Page";
	public static final String ORDER_BY_JPQL = " ORDER BY page.pageId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY EAB_CRAWLER_Page.pageId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(es.aragon.base.crawler.service.util.ServiceProps.get(
				"value.object.entity.cache.enabled.es.aragon.base.crawler.model.Page"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(es.aragon.base.crawler.service.util.ServiceProps.get(
				"value.object.finder.cache.enabled.es.aragon.base.crawler.model.Page"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(es.aragon.base.crawler.service.util.ServiceProps.get(
				"value.object.column.bitmask.enabled.es.aragon.base.crawler.model.Page"),
			true);
	public static final long ROOTPAGEID_COLUMN_BITMASK = 1L;
	public static final long UUID_COLUMN_BITMASK = 2L;
	public static final long PAGEID_COLUMN_BITMASK = 4L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static Page toModel(PageSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		Page model = new PageImpl();

		model.setUuid(soapModel.getUuid());
		model.setPageId(soapModel.getPageId());
		model.setTitle(soapModel.getTitle());
		model.setContentType(soapModel.getContentType());
		model.setMetaDescription(soapModel.getMetaDescription());
		model.setMetaKeywords(soapModel.getMetaKeywords());
		model.setContent(soapModel.getContent());
		model.setUrl(soapModel.getUrl());
		model.setCategoryIds(soapModel.getCategoryIds());
		model.setRootPageId(soapModel.getRootPageId());
		model.setParentPageId(soapModel.getParentPageId());
		model.setStatus(soapModel.getStatus());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<Page> toModels(PageSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<Page> models = new ArrayList<Page>(soapModels.length);

		for (PageSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(es.aragon.base.crawler.service.util.ServiceProps.get(
				"lock.expiration.time.es.aragon.base.crawler.model.Page"));

	public PageModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _pageId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setPageId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _pageId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Page.class;
	}

	@Override
	public String getModelClassName() {
		return Page.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("uuid", getUuid());
		attributes.put("pageId", getPageId());
		attributes.put("title", getTitle());
		attributes.put("contentType", getContentType());
		attributes.put("metaDescription", getMetaDescription());
		attributes.put("metaKeywords", getMetaKeywords());
		attributes.put("content", getContent());
		attributes.put("url", getUrl());
		attributes.put("categoryIds", getCategoryIds());
		attributes.put("rootPageId", getRootPageId());
		attributes.put("parentPageId", getParentPageId());
		attributes.put("status", getStatus());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		String uuid = (String)attributes.get("uuid");

		if (uuid != null) {
			setUuid(uuid);
		}

		Long pageId = (Long)attributes.get("pageId");

		if (pageId != null) {
			setPageId(pageId);
		}

		String title = (String)attributes.get("title");

		if (title != null) {
			setTitle(title);
		}

		String contentType = (String)attributes.get("contentType");

		if (contentType != null) {
			setContentType(contentType);
		}

		String metaDescription = (String)attributes.get("metaDescription");

		if (metaDescription != null) {
			setMetaDescription(metaDescription);
		}

		String metaKeywords = (String)attributes.get("metaKeywords");

		if (metaKeywords != null) {
			setMetaKeywords(metaKeywords);
		}

		String content = (String)attributes.get("content");

		if (content != null) {
			setContent(content);
		}

		String url = (String)attributes.get("url");

		if (url != null) {
			setUrl(url);
		}

		String categoryIds = (String)attributes.get("categoryIds");

		if (categoryIds != null) {
			setCategoryIds(categoryIds);
		}

		Long rootPageId = (Long)attributes.get("rootPageId");

		if (rootPageId != null) {
			setRootPageId(rootPageId);
		}

		Long parentPageId = (Long)attributes.get("parentPageId");

		if (parentPageId != null) {
			setParentPageId(parentPageId);
		}

		Long status = (Long)attributes.get("status");

		if (status != null) {
			setStatus(status);
		}
	}

	@JSON
	@Override
	public String getUuid() {
		if (_uuid == null) {
			return "";
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		if (_originalUuid == null) {
			_originalUuid = _uuid;
		}

		_uuid = uuid;
	}

	public String getOriginalUuid() {
		return GetterUtil.getString(_originalUuid);
	}

	@JSON
	@Override
	public long getPageId() {
		return _pageId;
	}

	@Override
	public void setPageId(long pageId) {
		_columnBitmask = -1L;

		_pageId = pageId;
	}

	@JSON
	@Override
	public String getTitle() {
		if (_title == null) {
			return "";
		}
		else {
			return _title;
		}
	}

	@Override
	public void setTitle(String title) {
		_title = title;
	}

	@JSON
	@Override
	public String getContentType() {
		if (_contentType == null) {
			return "";
		}
		else {
			return _contentType;
		}
	}

	@Override
	public void setContentType(String contentType) {
		_contentType = contentType;
	}

	@JSON
	@Override
	public String getMetaDescription() {
		if (_metaDescription == null) {
			return "";
		}
		else {
			return _metaDescription;
		}
	}

	@Override
	public void setMetaDescription(String metaDescription) {
		_metaDescription = metaDescription;
	}

	@JSON
	@Override
	public String getMetaKeywords() {
		if (_metaKeywords == null) {
			return "";
		}
		else {
			return _metaKeywords;
		}
	}

	@Override
	public void setMetaKeywords(String metaKeywords) {
		_metaKeywords = metaKeywords;
	}

	@JSON
	@Override
	public String getContent() {
		if (_content == null) {
			return "";
		}
		else {
			return _content;
		}
	}

	@Override
	public void setContent(String content) {
		_content = content;
	}

	@JSON
	@Override
	public String getUrl() {
		if (_url == null) {
			return "";
		}
		else {
			return _url;
		}
	}

	@Override
	public void setUrl(String url) {
		_url = url;
	}

	@JSON
	@Override
	public String getCategoryIds() {
		if (_categoryIds == null) {
			return "";
		}
		else {
			return _categoryIds;
		}
	}

	@Override
	public void setCategoryIds(String categoryIds) {
		_categoryIds = categoryIds;
	}

	@JSON
	@Override
	public long getRootPageId() {
		return _rootPageId;
	}

	@Override
	public void setRootPageId(long rootPageId) {
		_columnBitmask |= ROOTPAGEID_COLUMN_BITMASK;

		if (!_setOriginalRootPageId) {
			_setOriginalRootPageId = true;

			_originalRootPageId = _rootPageId;
		}

		_rootPageId = rootPageId;
	}

	public long getOriginalRootPageId() {
		return _originalRootPageId;
	}

	@JSON
	@Override
	public long getParentPageId() {
		return _parentPageId;
	}

	@Override
	public void setParentPageId(long parentPageId) {
		_parentPageId = parentPageId;
	}

	@JSON
	@Override
	public long getStatus() {
		return _status;
	}

	@Override
	public void setStatus(long status) {
		_status = status;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			Page.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Page toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (Page)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		PageImpl pageImpl = new PageImpl();

		pageImpl.setUuid(getUuid());
		pageImpl.setPageId(getPageId());
		pageImpl.setTitle(getTitle());
		pageImpl.setContentType(getContentType());
		pageImpl.setMetaDescription(getMetaDescription());
		pageImpl.setMetaKeywords(getMetaKeywords());
		pageImpl.setContent(getContent());
		pageImpl.setUrl(getUrl());
		pageImpl.setCategoryIds(getCategoryIds());
		pageImpl.setRootPageId(getRootPageId());
		pageImpl.setParentPageId(getParentPageId());
		pageImpl.setStatus(getStatus());

		pageImpl.resetOriginalValues();

		return pageImpl;
	}

	@Override
	public int compareTo(Page page) {
		int value = 0;

		if (getPageId() < page.getPageId()) {
			value = -1;
		}
		else if (getPageId() > page.getPageId()) {
			value = 1;
		}
		else {
			value = 0;
		}

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof Page)) {
			return false;
		}

		Page page = (Page)obj;

		long primaryKey = page.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		PageModelImpl pageModelImpl = this;

		pageModelImpl._originalUuid = pageModelImpl._uuid;

		pageModelImpl._originalRootPageId = pageModelImpl._rootPageId;

		pageModelImpl._setOriginalRootPageId = false;

		pageModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<Page> toCacheModel() {
		PageCacheModel pageCacheModel = new PageCacheModel();

		pageCacheModel.uuid = getUuid();

		String uuid = pageCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			pageCacheModel.uuid = null;
		}

		pageCacheModel.pageId = getPageId();

		pageCacheModel.title = getTitle();

		String title = pageCacheModel.title;

		if ((title != null) && (title.length() == 0)) {
			pageCacheModel.title = null;
		}

		pageCacheModel.contentType = getContentType();

		String contentType = pageCacheModel.contentType;

		if ((contentType != null) && (contentType.length() == 0)) {
			pageCacheModel.contentType = null;
		}

		pageCacheModel.metaDescription = getMetaDescription();

		String metaDescription = pageCacheModel.metaDescription;

		if ((metaDescription != null) && (metaDescription.length() == 0)) {
			pageCacheModel.metaDescription = null;
		}

		pageCacheModel.metaKeywords = getMetaKeywords();

		String metaKeywords = pageCacheModel.metaKeywords;

		if ((metaKeywords != null) && (metaKeywords.length() == 0)) {
			pageCacheModel.metaKeywords = null;
		}

		pageCacheModel.content = getContent();

		String content = pageCacheModel.content;

		if ((content != null) && (content.length() == 0)) {
			pageCacheModel.content = null;
		}

		pageCacheModel.url = getUrl();

		String url = pageCacheModel.url;

		if ((url != null) && (url.length() == 0)) {
			pageCacheModel.url = null;
		}

		pageCacheModel.categoryIds = getCategoryIds();

		String categoryIds = pageCacheModel.categoryIds;

		if ((categoryIds != null) && (categoryIds.length() == 0)) {
			pageCacheModel.categoryIds = null;
		}

		pageCacheModel.rootPageId = getRootPageId();

		pageCacheModel.parentPageId = getParentPageId();

		pageCacheModel.status = getStatus();

		return pageCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(25);

		sb.append("{uuid=");
		sb.append(getUuid());
		sb.append(", pageId=");
		sb.append(getPageId());
		sb.append(", title=");
		sb.append(getTitle());
		sb.append(", contentType=");
		sb.append(getContentType());
		sb.append(", metaDescription=");
		sb.append(getMetaDescription());
		sb.append(", metaKeywords=");
		sb.append(getMetaKeywords());
		sb.append(", content=");
		sb.append(getContent());
		sb.append(", url=");
		sb.append(getUrl());
		sb.append(", categoryIds=");
		sb.append(getCategoryIds());
		sb.append(", rootPageId=");
		sb.append(getRootPageId());
		sb.append(", parentPageId=");
		sb.append(getParentPageId());
		sb.append(", status=");
		sb.append(getStatus());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(40);

		sb.append("<model><model-name>");
		sb.append("es.aragon.base.crawler.model.Page");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>uuid</column-name><column-value><![CDATA[");
		sb.append(getUuid());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>pageId</column-name><column-value><![CDATA[");
		sb.append(getPageId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>title</column-name><column-value><![CDATA[");
		sb.append(getTitle());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>contentType</column-name><column-value><![CDATA[");
		sb.append(getContentType());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>metaDescription</column-name><column-value><![CDATA[");
		sb.append(getMetaDescription());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>metaKeywords</column-name><column-value><![CDATA[");
		sb.append(getMetaKeywords());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>content</column-name><column-value><![CDATA[");
		sb.append(getContent());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>url</column-name><column-value><![CDATA[");
		sb.append(getUrl());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>categoryIds</column-name><column-value><![CDATA[");
		sb.append(getCategoryIds());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>rootPageId</column-name><column-value><![CDATA[");
		sb.append(getRootPageId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>parentPageId</column-name><column-value><![CDATA[");
		sb.append(getParentPageId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>status</column-name><column-value><![CDATA[");
		sb.append(getStatus());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = Page.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			Page.class, ModelWrapper.class
		};
	private String _uuid;
	private String _originalUuid;
	private long _pageId;
	private String _title;
	private String _contentType;
	private String _metaDescription;
	private String _metaKeywords;
	private String _content;
	private String _url;
	private String _categoryIds;
	private long _rootPageId;
	private long _originalRootPageId;
	private boolean _setOriginalRootPageId;
	private long _parentPageId;
	private long _status;
	private long _columnBitmask;
	private Page _escapedModel;
}