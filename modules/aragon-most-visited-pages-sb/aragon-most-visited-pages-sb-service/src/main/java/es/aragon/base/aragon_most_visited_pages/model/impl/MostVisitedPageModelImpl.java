/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package es.aragon.base.aragon_most_visited_pages.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;

import es.aragon.base.aragon_most_visited_pages.model.MostVisitedPage;
import es.aragon.base.aragon_most_visited_pages.model.MostVisitedPageModel;
import es.aragon.base.aragon_most_visited_pages.model.MostVisitedPageSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the MostVisitedPage service. Represents a row in the &quot;EAB_AMVP_MostVisitedPage&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link MostVisitedPageModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link MostVisitedPageImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see MostVisitedPageImpl
 * @see MostVisitedPage
 * @see MostVisitedPageModel
 * @generated
 */
@JSON(strict = true)
@ProviderType
public class MostVisitedPageModelImpl extends BaseModelImpl<MostVisitedPage>
	implements MostVisitedPageModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a most visited page model instance should use the {@link MostVisitedPage} interface instead.
	 */
	public static final String TABLE_NAME = "EAB_AMVP_MostVisitedPage";
	public static final Object[][] TABLE_COLUMNS = {
			{ "uuid_", Types.VARCHAR },
			{ "mostVisitedPageId", Types.BIGINT },
			{ "path_", Types.VARCHAR },
			{ "visits", Types.INTEGER },
			{ "title", Types.VARCHAR },
			{ "position", Types.INTEGER },
			{ "visible", Types.BOOLEAN }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("mostVisitedPageId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("path_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("visits", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("title", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("position", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("visible", Types.BOOLEAN);
	}

	public static final String TABLE_SQL_CREATE = "create table EAB_AMVP_MostVisitedPage (uuid_ VARCHAR(75) null,mostVisitedPageId LONG not null primary key,path_ STRING null,visits INTEGER,title STRING null,position INTEGER,visible BOOLEAN)";
	public static final String TABLE_SQL_DROP = "drop table EAB_AMVP_MostVisitedPage";
	public static final String ORDER_BY_JPQL = " ORDER BY mostVisitedPage.visits DESC";
	public static final String ORDER_BY_SQL = " ORDER BY EAB_AMVP_MostVisitedPage.visits DESC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(es.aragon.base.aragon_most_visited_pages.service.util.ServiceProps.get(
				"value.object.entity.cache.enabled.es.aragon.base.aragon_most_visited_pages.model.MostVisitedPage"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(es.aragon.base.aragon_most_visited_pages.service.util.ServiceProps.get(
				"value.object.finder.cache.enabled.es.aragon.base.aragon_most_visited_pages.model.MostVisitedPage"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(es.aragon.base.aragon_most_visited_pages.service.util.ServiceProps.get(
				"value.object.column.bitmask.enabled.es.aragon.base.aragon_most_visited_pages.model.MostVisitedPage"),
			true);
	public static final long UUID_COLUMN_BITMASK = 1L;
	public static final long VISITS_COLUMN_BITMASK = 2L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static MostVisitedPage toModel(MostVisitedPageSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		MostVisitedPage model = new MostVisitedPageImpl();

		model.setUuid(soapModel.getUuid());
		model.setMostVisitedPageId(soapModel.getMostVisitedPageId());
		model.setPath(soapModel.getPath());
		model.setVisits(soapModel.getVisits());
		model.setTitle(soapModel.getTitle());
		model.setPosition(soapModel.getPosition());
		model.setVisible(soapModel.isVisible());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<MostVisitedPage> toModels(
		MostVisitedPageSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<MostVisitedPage> models = new ArrayList<MostVisitedPage>(soapModels.length);

		for (MostVisitedPageSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(es.aragon.base.aragon_most_visited_pages.service.util.ServiceProps.get(
				"lock.expiration.time.es.aragon.base.aragon_most_visited_pages.model.MostVisitedPage"));

	public MostVisitedPageModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _mostVisitedPageId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setMostVisitedPageId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _mostVisitedPageId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return MostVisitedPage.class;
	}

	@Override
	public String getModelClassName() {
		return MostVisitedPage.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("uuid", getUuid());
		attributes.put("mostVisitedPageId", getMostVisitedPageId());
		attributes.put("path", getPath());
		attributes.put("visits", getVisits());
		attributes.put("title", getTitle());
		attributes.put("position", getPosition());
		attributes.put("visible", isVisible());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		String uuid = (String)attributes.get("uuid");

		if (uuid != null) {
			setUuid(uuid);
		}

		Long mostVisitedPageId = (Long)attributes.get("mostVisitedPageId");

		if (mostVisitedPageId != null) {
			setMostVisitedPageId(mostVisitedPageId);
		}

		String path = (String)attributes.get("path");

		if (path != null) {
			setPath(path);
		}

		Integer visits = (Integer)attributes.get("visits");

		if (visits != null) {
			setVisits(visits);
		}

		String title = (String)attributes.get("title");

		if (title != null) {
			setTitle(title);
		}

		Integer position = (Integer)attributes.get("position");

		if (position != null) {
			setPosition(position);
		}

		Boolean visible = (Boolean)attributes.get("visible");

		if (visible != null) {
			setVisible(visible);
		}
	}

	@JSON
	@Override
	public String getUuid() {
		if (_uuid == null) {
			return "";
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		if (_originalUuid == null) {
			_originalUuid = _uuid;
		}

		_uuid = uuid;
	}

	public String getOriginalUuid() {
		return GetterUtil.getString(_originalUuid);
	}

	@JSON
	@Override
	public long getMostVisitedPageId() {
		return _mostVisitedPageId;
	}

	@Override
	public void setMostVisitedPageId(long mostVisitedPageId) {
		_mostVisitedPageId = mostVisitedPageId;
	}

	@JSON
	@Override
	public String getPath() {
		if (_path == null) {
			return "";
		}
		else {
			return _path;
		}
	}

	@Override
	public void setPath(String path) {
		_path = path;
	}

	@JSON
	@Override
	public int getVisits() {
		return _visits;
	}

	@Override
	public void setVisits(int visits) {
		_columnBitmask = -1L;

		_visits = visits;
	}

	@JSON
	@Override
	public String getTitle() {
		if (_title == null) {
			return "";
		}
		else {
			return _title;
		}
	}

	@Override
	public void setTitle(String title) {
		_title = title;
	}

	@JSON
	@Override
	public int getPosition() {
		return _position;
	}

	@Override
	public void setPosition(int position) {
		_position = position;
	}

	@JSON
	@Override
	public boolean getVisible() {
		return _visible;
	}

	@JSON
	@Override
	public boolean isVisible() {
		return _visible;
	}

	@Override
	public void setVisible(boolean visible) {
		_visible = visible;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			MostVisitedPage.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public MostVisitedPage toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (MostVisitedPage)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		MostVisitedPageImpl mostVisitedPageImpl = new MostVisitedPageImpl();

		mostVisitedPageImpl.setUuid(getUuid());
		mostVisitedPageImpl.setMostVisitedPageId(getMostVisitedPageId());
		mostVisitedPageImpl.setPath(getPath());
		mostVisitedPageImpl.setVisits(getVisits());
		mostVisitedPageImpl.setTitle(getTitle());
		mostVisitedPageImpl.setPosition(getPosition());
		mostVisitedPageImpl.setVisible(isVisible());

		mostVisitedPageImpl.resetOriginalValues();

		return mostVisitedPageImpl;
	}

	@Override
	public int compareTo(MostVisitedPage mostVisitedPage) {
		int value = 0;

		if (getVisits() < mostVisitedPage.getVisits()) {
			value = -1;
		}
		else if (getVisits() > mostVisitedPage.getVisits()) {
			value = 1;
		}
		else {
			value = 0;
		}

		value = value * -1;

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof MostVisitedPage)) {
			return false;
		}

		MostVisitedPage mostVisitedPage = (MostVisitedPage)obj;

		long primaryKey = mostVisitedPage.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		MostVisitedPageModelImpl mostVisitedPageModelImpl = this;

		mostVisitedPageModelImpl._originalUuid = mostVisitedPageModelImpl._uuid;

		mostVisitedPageModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<MostVisitedPage> toCacheModel() {
		MostVisitedPageCacheModel mostVisitedPageCacheModel = new MostVisitedPageCacheModel();

		mostVisitedPageCacheModel.uuid = getUuid();

		String uuid = mostVisitedPageCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			mostVisitedPageCacheModel.uuid = null;
		}

		mostVisitedPageCacheModel.mostVisitedPageId = getMostVisitedPageId();

		mostVisitedPageCacheModel.path = getPath();

		String path = mostVisitedPageCacheModel.path;

		if ((path != null) && (path.length() == 0)) {
			mostVisitedPageCacheModel.path = null;
		}

		mostVisitedPageCacheModel.visits = getVisits();

		mostVisitedPageCacheModel.title = getTitle();

		String title = mostVisitedPageCacheModel.title;

		if ((title != null) && (title.length() == 0)) {
			mostVisitedPageCacheModel.title = null;
		}

		mostVisitedPageCacheModel.position = getPosition();

		mostVisitedPageCacheModel.visible = isVisible();

		return mostVisitedPageCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(15);

		sb.append("{uuid=");
		sb.append(getUuid());
		sb.append(", mostVisitedPageId=");
		sb.append(getMostVisitedPageId());
		sb.append(", path=");
		sb.append(getPath());
		sb.append(", visits=");
		sb.append(getVisits());
		sb.append(", title=");
		sb.append(getTitle());
		sb.append(", position=");
		sb.append(getPosition());
		sb.append(", visible=");
		sb.append(isVisible());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(25);

		sb.append("<model><model-name>");
		sb.append(
			"es.aragon.base.aragon_most_visited_pages.model.MostVisitedPage");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>uuid</column-name><column-value><![CDATA[");
		sb.append(getUuid());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>mostVisitedPageId</column-name><column-value><![CDATA[");
		sb.append(getMostVisitedPageId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>path</column-name><column-value><![CDATA[");
		sb.append(getPath());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>visits</column-name><column-value><![CDATA[");
		sb.append(getVisits());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>title</column-name><column-value><![CDATA[");
		sb.append(getTitle());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>position</column-name><column-value><![CDATA[");
		sb.append(getPosition());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>visible</column-name><column-value><![CDATA[");
		sb.append(isVisible());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = MostVisitedPage.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			MostVisitedPage.class, ModelWrapper.class
		};
	private String _uuid;
	private String _originalUuid;
	private long _mostVisitedPageId;
	private String _path;
	private int _visits;
	private String _title;
	private int _position;
	private boolean _visible;
	private long _columnBitmask;
	private MostVisitedPage _escapedModel;
}