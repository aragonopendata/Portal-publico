/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package es.aragon.base.categories_custom_properties.service.base;

import aQute.bnd.annotation.ProviderType;

import com.liferay.exportimport.kernel.lar.ExportImportHelperUtil;
import com.liferay.exportimport.kernel.lar.ManifestSummary;
import com.liferay.exportimport.kernel.lar.PortletDataContext;
import com.liferay.exportimport.kernel.lar.StagedModelDataHandlerUtil;
import com.liferay.exportimport.kernel.lar.StagedModelType;

import com.liferay.portal.kernel.bean.BeanReference;
import com.liferay.portal.kernel.dao.db.DB;
import com.liferay.portal.kernel.dao.db.DBManagerUtil;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdate;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdateFactoryUtil;
import com.liferay.portal.kernel.dao.orm.ActionableDynamicQuery;
import com.liferay.portal.kernel.dao.orm.DefaultActionableDynamicQuery;
import com.liferay.portal.kernel.dao.orm.DynamicQuery;
import com.liferay.portal.kernel.dao.orm.DynamicQueryFactoryUtil;
import com.liferay.portal.kernel.dao.orm.ExportActionableDynamicQuery;
import com.liferay.portal.kernel.dao.orm.IndexableActionableDynamicQuery;
import com.liferay.portal.kernel.dao.orm.Projection;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.model.PersistedModel;
import com.liferay.portal.kernel.module.framework.service.IdentifiableOSGiService;
import com.liferay.portal.kernel.search.Indexable;
import com.liferay.portal.kernel.search.IndexableType;
import com.liferay.portal.kernel.service.BaseLocalServiceImpl;
import com.liferay.portal.kernel.service.PersistedModelLocalServiceRegistry;
import com.liferay.portal.kernel.service.persistence.ClassNamePersistence;
import com.liferay.portal.kernel.service.persistence.UserPersistence;
import com.liferay.portal.kernel.transaction.Transactional;
import com.liferay.portal.kernel.util.OrderByComparator;
import com.liferay.portal.kernel.util.PortalUtil;
import com.liferay.portal.spring.extender.service.ServiceReference;

import es.aragon.base.categories_custom_properties.model.CustomCategoryProperty;
import es.aragon.base.categories_custom_properties.service.CustomCategoryPropertyLocalService;
import es.aragon.base.categories_custom_properties.service.persistence.CustomCategoryPropertyPersistence;

import java.io.Serializable;

import java.util.List;

import javax.sql.DataSource;

/**
 * Provides the base implementation for the custom category property local service.
 *
 * <p>
 * This implementation exists only as a container for the default service methods generated by ServiceBuilder. All custom service methods should be put in {@link es.aragon.base.categories_custom_properties.service.impl.CustomCategoryPropertyLocalServiceImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see es.aragon.base.categories_custom_properties.service.impl.CustomCategoryPropertyLocalServiceImpl
 * @see es.aragon.base.categories_custom_properties.service.CustomCategoryPropertyLocalServiceUtil
 * @generated
 */
@ProviderType
public abstract class CustomCategoryPropertyLocalServiceBaseImpl
	extends BaseLocalServiceImpl implements CustomCategoryPropertyLocalService,
		IdentifiableOSGiService {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. Always use {@link es.aragon.base.categories_custom_properties.service.CustomCategoryPropertyLocalServiceUtil} to access the custom category property local service.
	 */

	/**
	 * Adds the custom category property to the database. Also notifies the appropriate model listeners.
	 *
	 * @param customCategoryProperty the custom category property
	 * @return the custom category property that was added
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public CustomCategoryProperty addCustomCategoryProperty(
		CustomCategoryProperty customCategoryProperty) {
		customCategoryProperty.setNew(true);

		return customCategoryPropertyPersistence.update(customCategoryProperty);
	}

	/**
	 * Creates a new custom category property with the primary key. Does not add the custom category property to the database.
	 *
	 * @param CustomCategoryPropertyId the primary key for the new custom category property
	 * @return the new custom category property
	 */
	@Override
	@Transactional(enabled = false)
	public CustomCategoryProperty createCustomCategoryProperty(
		long CustomCategoryPropertyId) {
		return customCategoryPropertyPersistence.create(CustomCategoryPropertyId);
	}

	/**
	 * Deletes the custom category property with the primary key from the database. Also notifies the appropriate model listeners.
	 *
	 * @param CustomCategoryPropertyId the primary key of the custom category property
	 * @return the custom category property that was removed
	 * @throws PortalException if a custom category property with the primary key could not be found
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public CustomCategoryProperty deleteCustomCategoryProperty(
		long CustomCategoryPropertyId) throws PortalException {
		return customCategoryPropertyPersistence.remove(CustomCategoryPropertyId);
	}

	/**
	 * Deletes the custom category property from the database. Also notifies the appropriate model listeners.
	 *
	 * @param customCategoryProperty the custom category property
	 * @return the custom category property that was removed
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public CustomCategoryProperty deleteCustomCategoryProperty(
		CustomCategoryProperty customCategoryProperty) {
		return customCategoryPropertyPersistence.remove(customCategoryProperty);
	}

	@Override
	public DynamicQuery dynamicQuery() {
		Class<?> clazz = getClass();

		return DynamicQueryFactoryUtil.forClass(CustomCategoryProperty.class,
			clazz.getClassLoader());
	}

	/**
	 * Performs a dynamic query on the database and returns the matching rows.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the matching rows
	 */
	@Override
	public <T> List<T> dynamicQuery(DynamicQuery dynamicQuery) {
		return customCategoryPropertyPersistence.findWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Performs a dynamic query on the database and returns a range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link es.aragon.base.categories_custom_properties.model.impl.CustomCategoryPropertyModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @return the range of matching rows
	 */
	@Override
	public <T> List<T> dynamicQuery(DynamicQuery dynamicQuery, int start,
		int end) {
		return customCategoryPropertyPersistence.findWithDynamicQuery(dynamicQuery,
			start, end);
	}

	/**
	 * Performs a dynamic query on the database and returns an ordered range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link es.aragon.base.categories_custom_properties.model.impl.CustomCategoryPropertyModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @param orderByComparator the comparator to order the results by (optionally <code>null</code>)
	 * @return the ordered range of matching rows
	 */
	@Override
	public <T> List<T> dynamicQuery(DynamicQuery dynamicQuery, int start,
		int end, OrderByComparator<T> orderByComparator) {
		return customCategoryPropertyPersistence.findWithDynamicQuery(dynamicQuery,
			start, end, orderByComparator);
	}

	/**
	 * Returns the number of rows matching the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the number of rows matching the dynamic query
	 */
	@Override
	public long dynamicQueryCount(DynamicQuery dynamicQuery) {
		return customCategoryPropertyPersistence.countWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Returns the number of rows matching the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @param projection the projection to apply to the query
	 * @return the number of rows matching the dynamic query
	 */
	@Override
	public long dynamicQueryCount(DynamicQuery dynamicQuery,
		Projection projection) {
		return customCategoryPropertyPersistence.countWithDynamicQuery(dynamicQuery,
			projection);
	}

	@Override
	public CustomCategoryProperty fetchCustomCategoryProperty(
		long CustomCategoryPropertyId) {
		return customCategoryPropertyPersistence.fetchByPrimaryKey(CustomCategoryPropertyId);
	}

	/**
	 * Returns the custom category property matching the UUID and group.
	 *
	 * @param uuid the custom category property's UUID
	 * @param groupId the primary key of the group
	 * @return the matching custom category property, or <code>null</code> if a matching custom category property could not be found
	 */
	@Override
	public CustomCategoryProperty fetchCustomCategoryPropertyByUuidAndGroupId(
		String uuid, long groupId) {
		return customCategoryPropertyPersistence.fetchByUUID_G(uuid, groupId);
	}

	/**
	 * Returns the custom category property with the primary key.
	 *
	 * @param CustomCategoryPropertyId the primary key of the custom category property
	 * @return the custom category property
	 * @throws PortalException if a custom category property with the primary key could not be found
	 */
	@Override
	public CustomCategoryProperty getCustomCategoryProperty(
		long CustomCategoryPropertyId) throws PortalException {
		return customCategoryPropertyPersistence.findByPrimaryKey(CustomCategoryPropertyId);
	}

	@Override
	public ActionableDynamicQuery getActionableDynamicQuery() {
		ActionableDynamicQuery actionableDynamicQuery = new DefaultActionableDynamicQuery();

		actionableDynamicQuery.setBaseLocalService(customCategoryPropertyLocalService);
		actionableDynamicQuery.setClassLoader(getClassLoader());
		actionableDynamicQuery.setModelClass(CustomCategoryProperty.class);

		actionableDynamicQuery.setPrimaryKeyPropertyName(
			"CustomCategoryPropertyId");

		return actionableDynamicQuery;
	}

	@Override
	public IndexableActionableDynamicQuery getIndexableActionableDynamicQuery() {
		IndexableActionableDynamicQuery indexableActionableDynamicQuery = new IndexableActionableDynamicQuery();

		indexableActionableDynamicQuery.setBaseLocalService(customCategoryPropertyLocalService);
		indexableActionableDynamicQuery.setClassLoader(getClassLoader());
		indexableActionableDynamicQuery.setModelClass(CustomCategoryProperty.class);

		indexableActionableDynamicQuery.setPrimaryKeyPropertyName(
			"CustomCategoryPropertyId");

		return indexableActionableDynamicQuery;
	}

	protected void initActionableDynamicQuery(
		ActionableDynamicQuery actionableDynamicQuery) {
		actionableDynamicQuery.setBaseLocalService(customCategoryPropertyLocalService);
		actionableDynamicQuery.setClassLoader(getClassLoader());
		actionableDynamicQuery.setModelClass(CustomCategoryProperty.class);

		actionableDynamicQuery.setPrimaryKeyPropertyName(
			"CustomCategoryPropertyId");
	}

	@Override
	public ExportActionableDynamicQuery getExportActionableDynamicQuery(
		final PortletDataContext portletDataContext) {
		final ExportActionableDynamicQuery exportActionableDynamicQuery = new ExportActionableDynamicQuery() {
				@Override
				public long performCount() throws PortalException {
					ManifestSummary manifestSummary = portletDataContext.getManifestSummary();

					StagedModelType stagedModelType = getStagedModelType();

					long modelAdditionCount = super.performCount();

					manifestSummary.addModelAdditionCount(stagedModelType,
						modelAdditionCount);

					long modelDeletionCount = ExportImportHelperUtil.getModelDeletionCount(portletDataContext,
							stagedModelType);

					manifestSummary.addModelDeletionCount(stagedModelType,
						modelDeletionCount);

					return modelAdditionCount;
				}
			};

		initActionableDynamicQuery(exportActionableDynamicQuery);

		exportActionableDynamicQuery.setAddCriteriaMethod(new ActionableDynamicQuery.AddCriteriaMethod() {
				@Override
				public void addCriteria(DynamicQuery dynamicQuery) {
					portletDataContext.addDateRangeCriteria(dynamicQuery,
						"modifiedDate");
				}
			});

		exportActionableDynamicQuery.setCompanyId(portletDataContext.getCompanyId());

		exportActionableDynamicQuery.setPerformActionMethod(new ActionableDynamicQuery.PerformActionMethod<CustomCategoryProperty>() {
				@Override
				public void performAction(
					CustomCategoryProperty customCategoryProperty)
					throws PortalException {
					StagedModelDataHandlerUtil.exportStagedModel(portletDataContext,
						customCategoryProperty);
				}
			});
		exportActionableDynamicQuery.setStagedModelType(new StagedModelType(
				PortalUtil.getClassNameId(
					CustomCategoryProperty.class.getName())));

		return exportActionableDynamicQuery;
	}

	/**
	 * @throws PortalException
	 */
	@Override
	public PersistedModel deletePersistedModel(PersistedModel persistedModel)
		throws PortalException {
		return customCategoryPropertyLocalService.deleteCustomCategoryProperty((CustomCategoryProperty)persistedModel);
	}

	@Override
	public PersistedModel getPersistedModel(Serializable primaryKeyObj)
		throws PortalException {
		return customCategoryPropertyPersistence.findByPrimaryKey(primaryKeyObj);
	}

	/**
	 * Returns all the custom category properties matching the UUID and company.
	 *
	 * @param uuid the UUID of the custom category properties
	 * @param companyId the primary key of the company
	 * @return the matching custom category properties, or an empty list if no matches were found
	 */
	@Override
	public List<CustomCategoryProperty> getCustomCategoryPropertiesByUuidAndCompanyId(
		String uuid, long companyId) {
		return customCategoryPropertyPersistence.findByUuid_C(uuid, companyId);
	}

	/**
	 * Returns a range of custom category properties matching the UUID and company.
	 *
	 * @param uuid the UUID of the custom category properties
	 * @param companyId the primary key of the company
	 * @param start the lower bound of the range of custom category properties
	 * @param end the upper bound of the range of custom category properties (not inclusive)
	 * @param orderByComparator the comparator to order the results by (optionally <code>null</code>)
	 * @return the range of matching custom category properties, or an empty list if no matches were found
	 */
	@Override
	public List<CustomCategoryProperty> getCustomCategoryPropertiesByUuidAndCompanyId(
		String uuid, long companyId, int start, int end,
		OrderByComparator<CustomCategoryProperty> orderByComparator) {
		return customCategoryPropertyPersistence.findByUuid_C(uuid, companyId,
			start, end, orderByComparator);
	}

	/**
	 * Returns the custom category property matching the UUID and group.
	 *
	 * @param uuid the custom category property's UUID
	 * @param groupId the primary key of the group
	 * @return the matching custom category property
	 * @throws PortalException if a matching custom category property could not be found
	 */
	@Override
	public CustomCategoryProperty getCustomCategoryPropertyByUuidAndGroupId(
		String uuid, long groupId) throws PortalException {
		return customCategoryPropertyPersistence.findByUUID_G(uuid, groupId);
	}

	/**
	 * Returns a range of all the custom category properties.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link es.aragon.base.categories_custom_properties.model.impl.CustomCategoryPropertyModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param start the lower bound of the range of custom category properties
	 * @param end the upper bound of the range of custom category properties (not inclusive)
	 * @return the range of custom category properties
	 */
	@Override
	public List<CustomCategoryProperty> getCustomCategoryProperties(int start,
		int end) {
		return customCategoryPropertyPersistence.findAll(start, end);
	}

	/**
	 * Returns the number of custom category properties.
	 *
	 * @return the number of custom category properties
	 */
	@Override
	public int getCustomCategoryPropertiesCount() {
		return customCategoryPropertyPersistence.countAll();
	}

	/**
	 * Updates the custom category property in the database or adds it if it does not yet exist. Also notifies the appropriate model listeners.
	 *
	 * @param customCategoryProperty the custom category property
	 * @return the custom category property that was updated
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public CustomCategoryProperty updateCustomCategoryProperty(
		CustomCategoryProperty customCategoryProperty) {
		return customCategoryPropertyPersistence.update(customCategoryProperty);
	}

	/**
	 * Returns the custom category property local service.
	 *
	 * @return the custom category property local service
	 */
	public CustomCategoryPropertyLocalService getCustomCategoryPropertyLocalService() {
		return customCategoryPropertyLocalService;
	}

	/**
	 * Sets the custom category property local service.
	 *
	 * @param customCategoryPropertyLocalService the custom category property local service
	 */
	public void setCustomCategoryPropertyLocalService(
		CustomCategoryPropertyLocalService customCategoryPropertyLocalService) {
		this.customCategoryPropertyLocalService = customCategoryPropertyLocalService;
	}

	/**
	 * Returns the custom category property persistence.
	 *
	 * @return the custom category property persistence
	 */
	public CustomCategoryPropertyPersistence getCustomCategoryPropertyPersistence() {
		return customCategoryPropertyPersistence;
	}

	/**
	 * Sets the custom category property persistence.
	 *
	 * @param customCategoryPropertyPersistence the custom category property persistence
	 */
	public void setCustomCategoryPropertyPersistence(
		CustomCategoryPropertyPersistence customCategoryPropertyPersistence) {
		this.customCategoryPropertyPersistence = customCategoryPropertyPersistence;
	}

	/**
	 * Returns the counter local service.
	 *
	 * @return the counter local service
	 */
	public com.liferay.counter.kernel.service.CounterLocalService getCounterLocalService() {
		return counterLocalService;
	}

	/**
	 * Sets the counter local service.
	 *
	 * @param counterLocalService the counter local service
	 */
	public void setCounterLocalService(
		com.liferay.counter.kernel.service.CounterLocalService counterLocalService) {
		this.counterLocalService = counterLocalService;
	}

	/**
	 * Returns the class name local service.
	 *
	 * @return the class name local service
	 */
	public com.liferay.portal.kernel.service.ClassNameLocalService getClassNameLocalService() {
		return classNameLocalService;
	}

	/**
	 * Sets the class name local service.
	 *
	 * @param classNameLocalService the class name local service
	 */
	public void setClassNameLocalService(
		com.liferay.portal.kernel.service.ClassNameLocalService classNameLocalService) {
		this.classNameLocalService = classNameLocalService;
	}

	/**
	 * Returns the class name persistence.
	 *
	 * @return the class name persistence
	 */
	public ClassNamePersistence getClassNamePersistence() {
		return classNamePersistence;
	}

	/**
	 * Sets the class name persistence.
	 *
	 * @param classNamePersistence the class name persistence
	 */
	public void setClassNamePersistence(
		ClassNamePersistence classNamePersistence) {
		this.classNamePersistence = classNamePersistence;
	}

	/**
	 * Returns the resource local service.
	 *
	 * @return the resource local service
	 */
	public com.liferay.portal.kernel.service.ResourceLocalService getResourceLocalService() {
		return resourceLocalService;
	}

	/**
	 * Sets the resource local service.
	 *
	 * @param resourceLocalService the resource local service
	 */
	public void setResourceLocalService(
		com.liferay.portal.kernel.service.ResourceLocalService resourceLocalService) {
		this.resourceLocalService = resourceLocalService;
	}

	/**
	 * Returns the user local service.
	 *
	 * @return the user local service
	 */
	public com.liferay.portal.kernel.service.UserLocalService getUserLocalService() {
		return userLocalService;
	}

	/**
	 * Sets the user local service.
	 *
	 * @param userLocalService the user local service
	 */
	public void setUserLocalService(
		com.liferay.portal.kernel.service.UserLocalService userLocalService) {
		this.userLocalService = userLocalService;
	}

	/**
	 * Returns the user persistence.
	 *
	 * @return the user persistence
	 */
	public UserPersistence getUserPersistence() {
		return userPersistence;
	}

	/**
	 * Sets the user persistence.
	 *
	 * @param userPersistence the user persistence
	 */
	public void setUserPersistence(UserPersistence userPersistence) {
		this.userPersistence = userPersistence;
	}

	public void afterPropertiesSet() {
		persistedModelLocalServiceRegistry.register("es.aragon.base.categories_custom_properties.model.CustomCategoryProperty",
			customCategoryPropertyLocalService);
	}

	public void destroy() {
		persistedModelLocalServiceRegistry.unregister(
			"es.aragon.base.categories_custom_properties.model.CustomCategoryProperty");
	}

	/**
	 * Returns the OSGi service identifier.
	 *
	 * @return the OSGi service identifier
	 */
	@Override
	public String getOSGiServiceIdentifier() {
		return CustomCategoryPropertyLocalService.class.getName();
	}

	protected Class<?> getModelClass() {
		return CustomCategoryProperty.class;
	}

	protected String getModelClassName() {
		return CustomCategoryProperty.class.getName();
	}

	/**
	 * Performs a SQL query.
	 *
	 * @param sql the sql query
	 */
	protected void runSQL(String sql) {
		try {
			DataSource dataSource = customCategoryPropertyPersistence.getDataSource();

			DB db = DBManagerUtil.getDB();

			sql = db.buildSQL(sql);
			sql = PortalUtil.transformSQL(sql);

			SqlUpdate sqlUpdate = SqlUpdateFactoryUtil.getSqlUpdate(dataSource,
					sql);

			sqlUpdate.update();
		}
		catch (Exception e) {
			throw new SystemException(e);
		}
	}

	@BeanReference(type = CustomCategoryPropertyLocalService.class)
	protected CustomCategoryPropertyLocalService customCategoryPropertyLocalService;
	@BeanReference(type = CustomCategoryPropertyPersistence.class)
	protected CustomCategoryPropertyPersistence customCategoryPropertyPersistence;
	@ServiceReference(type = com.liferay.counter.kernel.service.CounterLocalService.class)
	protected com.liferay.counter.kernel.service.CounterLocalService counterLocalService;
	@ServiceReference(type = com.liferay.portal.kernel.service.ClassNameLocalService.class)
	protected com.liferay.portal.kernel.service.ClassNameLocalService classNameLocalService;
	@ServiceReference(type = ClassNamePersistence.class)
	protected ClassNamePersistence classNamePersistence;
	@ServiceReference(type = com.liferay.portal.kernel.service.ResourceLocalService.class)
	protected com.liferay.portal.kernel.service.ResourceLocalService resourceLocalService;
	@ServiceReference(type = com.liferay.portal.kernel.service.UserLocalService.class)
	protected com.liferay.portal.kernel.service.UserLocalService userLocalService;
	@ServiceReference(type = UserPersistence.class)
	protected UserPersistence userPersistence;
	@ServiceReference(type = PersistedModelLocalServiceRegistry.class)
	protected PersistedModelLocalServiceRegistry persistedModelLocalServiceRegistry;
}