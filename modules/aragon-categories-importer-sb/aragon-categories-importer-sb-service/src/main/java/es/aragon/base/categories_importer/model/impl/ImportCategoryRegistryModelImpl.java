/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package es.aragon.base.categories_importer.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.DateUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;

import es.aragon.base.categories_importer.model.ImportCategoryRegistry;
import es.aragon.base.categories_importer.model.ImportCategoryRegistryModel;
import es.aragon.base.categories_importer.model.ImportCategoryRegistrySoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the ImportCategoryRegistry service. Represents a row in the &quot;EAB_CI_ImportCategoryRegistry&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link ImportCategoryRegistryModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link ImportCategoryRegistryImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see ImportCategoryRegistryImpl
 * @see ImportCategoryRegistry
 * @see ImportCategoryRegistryModel
 * @generated
 */
@JSON(strict = true)
@ProviderType
public class ImportCategoryRegistryModelImpl extends BaseModelImpl<ImportCategoryRegistry>
	implements ImportCategoryRegistryModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a import category registry model instance should use the {@link ImportCategoryRegistry} interface instead.
	 */
	public static final String TABLE_NAME = "EAB_CI_ImportCategoryRegistry";
	public static final Object[][] TABLE_COLUMNS = {
			{ "uuid_", Types.VARCHAR },
			{ "importCategoryRegistryId", Types.BIGINT },
			{ "vocabularyId", Types.BIGINT },
			{ "categoryId", Types.BIGINT },
			{ "importDate", Types.TIMESTAMP },
			{ "type_", Types.VARCHAR },
			{ "comment_", Types.VARCHAR }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("importCategoryRegistryId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("vocabularyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("categoryId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("importDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("type_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("comment_", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE = "create table EAB_CI_ImportCategoryRegistry (uuid_ VARCHAR(75) null,importCategoryRegistryId LONG not null primary key,vocabularyId LONG,categoryId LONG,importDate DATE null,type_ VARCHAR(75) null,comment_ VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table EAB_CI_ImportCategoryRegistry";
	public static final String ORDER_BY_JPQL = " ORDER BY importCategoryRegistry.importDate DESC";
	public static final String ORDER_BY_SQL = " ORDER BY EAB_CI_ImportCategoryRegistry.importDate DESC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(es.aragon.base.categories_importer.service.util.ServiceProps.get(
				"value.object.entity.cache.enabled.es.aragon.base.categories_importer.model.ImportCategoryRegistry"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(es.aragon.base.categories_importer.service.util.ServiceProps.get(
				"value.object.finder.cache.enabled.es.aragon.base.categories_importer.model.ImportCategoryRegistry"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(es.aragon.base.categories_importer.service.util.ServiceProps.get(
				"value.object.column.bitmask.enabled.es.aragon.base.categories_importer.model.ImportCategoryRegistry"),
			true);
	public static final long CATEGORYID_COLUMN_BITMASK = 1L;
	public static final long TYPE_COLUMN_BITMASK = 2L;
	public static final long UUID_COLUMN_BITMASK = 4L;
	public static final long VOCABULARYID_COLUMN_BITMASK = 8L;
	public static final long IMPORTDATE_COLUMN_BITMASK = 16L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static ImportCategoryRegistry toModel(
		ImportCategoryRegistrySoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		ImportCategoryRegistry model = new ImportCategoryRegistryImpl();

		model.setUuid(soapModel.getUuid());
		model.setImportCategoryRegistryId(soapModel.getImportCategoryRegistryId());
		model.setVocabularyId(soapModel.getVocabularyId());
		model.setCategoryId(soapModel.getCategoryId());
		model.setImportDate(soapModel.getImportDate());
		model.setType(soapModel.getType());
		model.setComment(soapModel.getComment());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<ImportCategoryRegistry> toModels(
		ImportCategoryRegistrySoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<ImportCategoryRegistry> models = new ArrayList<ImportCategoryRegistry>(soapModels.length);

		for (ImportCategoryRegistrySoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(es.aragon.base.categories_importer.service.util.ServiceProps.get(
				"lock.expiration.time.es.aragon.base.categories_importer.model.ImportCategoryRegistry"));

	public ImportCategoryRegistryModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _importCategoryRegistryId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setImportCategoryRegistryId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _importCategoryRegistryId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return ImportCategoryRegistry.class;
	}

	@Override
	public String getModelClassName() {
		return ImportCategoryRegistry.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("uuid", getUuid());
		attributes.put("importCategoryRegistryId", getImportCategoryRegistryId());
		attributes.put("vocabularyId", getVocabularyId());
		attributes.put("categoryId", getCategoryId());
		attributes.put("importDate", getImportDate());
		attributes.put("type", getType());
		attributes.put("comment", getComment());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		String uuid = (String)attributes.get("uuid");

		if (uuid != null) {
			setUuid(uuid);
		}

		Long importCategoryRegistryId = (Long)attributes.get(
				"importCategoryRegistryId");

		if (importCategoryRegistryId != null) {
			setImportCategoryRegistryId(importCategoryRegistryId);
		}

		Long vocabularyId = (Long)attributes.get("vocabularyId");

		if (vocabularyId != null) {
			setVocabularyId(vocabularyId);
		}

		Long categoryId = (Long)attributes.get("categoryId");

		if (categoryId != null) {
			setCategoryId(categoryId);
		}

		Date importDate = (Date)attributes.get("importDate");

		if (importDate != null) {
			setImportDate(importDate);
		}

		String type = (String)attributes.get("type");

		if (type != null) {
			setType(type);
		}

		String comment = (String)attributes.get("comment");

		if (comment != null) {
			setComment(comment);
		}
	}

	@JSON
	@Override
	public String getUuid() {
		if (_uuid == null) {
			return "";
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		if (_originalUuid == null) {
			_originalUuid = _uuid;
		}

		_uuid = uuid;
	}

	public String getOriginalUuid() {
		return GetterUtil.getString(_originalUuid);
	}

	@JSON
	@Override
	public long getImportCategoryRegistryId() {
		return _importCategoryRegistryId;
	}

	@Override
	public void setImportCategoryRegistryId(long importCategoryRegistryId) {
		_importCategoryRegistryId = importCategoryRegistryId;
	}

	@JSON
	@Override
	public long getVocabularyId() {
		return _vocabularyId;
	}

	@Override
	public void setVocabularyId(long vocabularyId) {
		_columnBitmask |= VOCABULARYID_COLUMN_BITMASK;

		if (!_setOriginalVocabularyId) {
			_setOriginalVocabularyId = true;

			_originalVocabularyId = _vocabularyId;
		}

		_vocabularyId = vocabularyId;
	}

	public long getOriginalVocabularyId() {
		return _originalVocabularyId;
	}

	@JSON
	@Override
	public long getCategoryId() {
		return _categoryId;
	}

	@Override
	public void setCategoryId(long categoryId) {
		_columnBitmask |= CATEGORYID_COLUMN_BITMASK;

		if (!_setOriginalCategoryId) {
			_setOriginalCategoryId = true;

			_originalCategoryId = _categoryId;
		}

		_categoryId = categoryId;
	}

	public long getOriginalCategoryId() {
		return _originalCategoryId;
	}

	@JSON
	@Override
	public Date getImportDate() {
		return _importDate;
	}

	@Override
	public void setImportDate(Date importDate) {
		_columnBitmask = -1L;

		_importDate = importDate;
	}

	@JSON
	@Override
	public String getType() {
		if (_type == null) {
			return "";
		}
		else {
			return _type;
		}
	}

	@Override
	public void setType(String type) {
		_columnBitmask |= TYPE_COLUMN_BITMASK;

		if (_originalType == null) {
			_originalType = _type;
		}

		_type = type;
	}

	public String getOriginalType() {
		return GetterUtil.getString(_originalType);
	}

	@JSON
	@Override
	public String getComment() {
		if (_comment == null) {
			return "";
		}
		else {
			return _comment;
		}
	}

	@Override
	public void setComment(String comment) {
		_comment = comment;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			ImportCategoryRegistry.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public ImportCategoryRegistry toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (ImportCategoryRegistry)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		ImportCategoryRegistryImpl importCategoryRegistryImpl = new ImportCategoryRegistryImpl();

		importCategoryRegistryImpl.setUuid(getUuid());
		importCategoryRegistryImpl.setImportCategoryRegistryId(getImportCategoryRegistryId());
		importCategoryRegistryImpl.setVocabularyId(getVocabularyId());
		importCategoryRegistryImpl.setCategoryId(getCategoryId());
		importCategoryRegistryImpl.setImportDate(getImportDate());
		importCategoryRegistryImpl.setType(getType());
		importCategoryRegistryImpl.setComment(getComment());

		importCategoryRegistryImpl.resetOriginalValues();

		return importCategoryRegistryImpl;
	}

	@Override
	public int compareTo(ImportCategoryRegistry importCategoryRegistry) {
		int value = 0;

		value = DateUtil.compareTo(getImportDate(),
				importCategoryRegistry.getImportDate());

		value = value * -1;

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof ImportCategoryRegistry)) {
			return false;
		}

		ImportCategoryRegistry importCategoryRegistry = (ImportCategoryRegistry)obj;

		long primaryKey = importCategoryRegistry.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		ImportCategoryRegistryModelImpl importCategoryRegistryModelImpl = this;

		importCategoryRegistryModelImpl._originalUuid = importCategoryRegistryModelImpl._uuid;

		importCategoryRegistryModelImpl._originalVocabularyId = importCategoryRegistryModelImpl._vocabularyId;

		importCategoryRegistryModelImpl._setOriginalVocabularyId = false;

		importCategoryRegistryModelImpl._originalCategoryId = importCategoryRegistryModelImpl._categoryId;

		importCategoryRegistryModelImpl._setOriginalCategoryId = false;

		importCategoryRegistryModelImpl._originalType = importCategoryRegistryModelImpl._type;

		importCategoryRegistryModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<ImportCategoryRegistry> toCacheModel() {
		ImportCategoryRegistryCacheModel importCategoryRegistryCacheModel = new ImportCategoryRegistryCacheModel();

		importCategoryRegistryCacheModel.uuid = getUuid();

		String uuid = importCategoryRegistryCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			importCategoryRegistryCacheModel.uuid = null;
		}

		importCategoryRegistryCacheModel.importCategoryRegistryId = getImportCategoryRegistryId();

		importCategoryRegistryCacheModel.vocabularyId = getVocabularyId();

		importCategoryRegistryCacheModel.categoryId = getCategoryId();

		Date importDate = getImportDate();

		if (importDate != null) {
			importCategoryRegistryCacheModel.importDate = importDate.getTime();
		}
		else {
			importCategoryRegistryCacheModel.importDate = Long.MIN_VALUE;
		}

		importCategoryRegistryCacheModel.type = getType();

		String type = importCategoryRegistryCacheModel.type;

		if ((type != null) && (type.length() == 0)) {
			importCategoryRegistryCacheModel.type = null;
		}

		importCategoryRegistryCacheModel.comment = getComment();

		String comment = importCategoryRegistryCacheModel.comment;

		if ((comment != null) && (comment.length() == 0)) {
			importCategoryRegistryCacheModel.comment = null;
		}

		return importCategoryRegistryCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(15);

		sb.append("{uuid=");
		sb.append(getUuid());
		sb.append(", importCategoryRegistryId=");
		sb.append(getImportCategoryRegistryId());
		sb.append(", vocabularyId=");
		sb.append(getVocabularyId());
		sb.append(", categoryId=");
		sb.append(getCategoryId());
		sb.append(", importDate=");
		sb.append(getImportDate());
		sb.append(", type=");
		sb.append(getType());
		sb.append(", comment=");
		sb.append(getComment());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(25);

		sb.append("<model><model-name>");
		sb.append(
			"es.aragon.base.categories_importer.model.ImportCategoryRegistry");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>uuid</column-name><column-value><![CDATA[");
		sb.append(getUuid());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>importCategoryRegistryId</column-name><column-value><![CDATA[");
		sb.append(getImportCategoryRegistryId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>vocabularyId</column-name><column-value><![CDATA[");
		sb.append(getVocabularyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>categoryId</column-name><column-value><![CDATA[");
		sb.append(getCategoryId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>importDate</column-name><column-value><![CDATA[");
		sb.append(getImportDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>type</column-name><column-value><![CDATA[");
		sb.append(getType());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>comment</column-name><column-value><![CDATA[");
		sb.append(getComment());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = ImportCategoryRegistry.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			ImportCategoryRegistry.class, ModelWrapper.class
		};
	private String _uuid;
	private String _originalUuid;
	private long _importCategoryRegistryId;
	private long _vocabularyId;
	private long _originalVocabularyId;
	private boolean _setOriginalVocabularyId;
	private long _categoryId;
	private long _originalCategoryId;
	private boolean _setOriginalCategoryId;
	private Date _importDate;
	private String _type;
	private String _originalType;
	private String _comment;
	private long _columnBitmask;
	private ImportCategoryRegistry _escapedModel;
}