/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package es.aragon.base.social_network.sb.service.base;

import aQute.bnd.annotation.ProviderType;

import com.liferay.exportimport.kernel.lar.ExportImportHelperUtil;
import com.liferay.exportimport.kernel.lar.ManifestSummary;
import com.liferay.exportimport.kernel.lar.PortletDataContext;
import com.liferay.exportimport.kernel.lar.StagedModelDataHandlerUtil;
import com.liferay.exportimport.kernel.lar.StagedModelType;

import com.liferay.portal.kernel.bean.BeanReference;
import com.liferay.portal.kernel.dao.db.DB;
import com.liferay.portal.kernel.dao.db.DBManagerUtil;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdate;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdateFactoryUtil;
import com.liferay.portal.kernel.dao.orm.ActionableDynamicQuery;
import com.liferay.portal.kernel.dao.orm.DefaultActionableDynamicQuery;
import com.liferay.portal.kernel.dao.orm.DynamicQuery;
import com.liferay.portal.kernel.dao.orm.DynamicQueryFactoryUtil;
import com.liferay.portal.kernel.dao.orm.ExportActionableDynamicQuery;
import com.liferay.portal.kernel.dao.orm.IndexableActionableDynamicQuery;
import com.liferay.portal.kernel.dao.orm.Projection;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.model.PersistedModel;
import com.liferay.portal.kernel.module.framework.service.IdentifiableOSGiService;
import com.liferay.portal.kernel.search.Indexable;
import com.liferay.portal.kernel.search.IndexableType;
import com.liferay.portal.kernel.service.BaseLocalServiceImpl;
import com.liferay.portal.kernel.service.PersistedModelLocalServiceRegistry;
import com.liferay.portal.kernel.service.persistence.ClassNamePersistence;
import com.liferay.portal.kernel.service.persistence.UserPersistence;
import com.liferay.portal.kernel.transaction.Transactional;
import com.liferay.portal.kernel.util.OrderByComparator;
import com.liferay.portal.kernel.util.PortalUtil;
import com.liferay.portal.spring.extender.service.ServiceReference;

import es.aragon.base.social_network.sb.model.SocialNetwork;
import es.aragon.base.social_network.sb.service.SocialNetworkLocalService;
import es.aragon.base.social_network.sb.service.persistence.SocialNetworkPersistence;

import java.io.Serializable;

import java.util.List;

import javax.sql.DataSource;

/**
 * Provides the base implementation for the social network local service.
 *
 * <p>
 * This implementation exists only as a container for the default service methods generated by ServiceBuilder. All custom service methods should be put in {@link es.aragon.base.social_network.sb.service.impl.SocialNetworkLocalServiceImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see es.aragon.base.social_network.sb.service.impl.SocialNetworkLocalServiceImpl
 * @see es.aragon.base.social_network.sb.service.SocialNetworkLocalServiceUtil
 * @generated
 */
@ProviderType
public abstract class SocialNetworkLocalServiceBaseImpl
	extends BaseLocalServiceImpl implements SocialNetworkLocalService,
		IdentifiableOSGiService {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. Always use {@link es.aragon.base.social_network.sb.service.SocialNetworkLocalServiceUtil} to access the social network local service.
	 */

	/**
	 * Adds the social network to the database. Also notifies the appropriate model listeners.
	 *
	 * @param socialNetwork the social network
	 * @return the social network that was added
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public SocialNetwork addSocialNetwork(SocialNetwork socialNetwork) {
		socialNetwork.setNew(true);

		return socialNetworkPersistence.update(socialNetwork);
	}

	/**
	 * Creates a new social network with the primary key. Does not add the social network to the database.
	 *
	 * @param socialNetworkId the primary key for the new social network
	 * @return the new social network
	 */
	@Override
	@Transactional(enabled = false)
	public SocialNetwork createSocialNetwork(long socialNetworkId) {
		return socialNetworkPersistence.create(socialNetworkId);
	}

	/**
	 * Deletes the social network with the primary key from the database. Also notifies the appropriate model listeners.
	 *
	 * @param socialNetworkId the primary key of the social network
	 * @return the social network that was removed
	 * @throws PortalException if a social network with the primary key could not be found
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public SocialNetwork deleteSocialNetwork(long socialNetworkId)
		throws PortalException {
		return socialNetworkPersistence.remove(socialNetworkId);
	}

	/**
	 * Deletes the social network from the database. Also notifies the appropriate model listeners.
	 *
	 * @param socialNetwork the social network
	 * @return the social network that was removed
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public SocialNetwork deleteSocialNetwork(SocialNetwork socialNetwork) {
		return socialNetworkPersistence.remove(socialNetwork);
	}

	@Override
	public DynamicQuery dynamicQuery() {
		Class<?> clazz = getClass();

		return DynamicQueryFactoryUtil.forClass(SocialNetwork.class,
			clazz.getClassLoader());
	}

	/**
	 * Performs a dynamic query on the database and returns the matching rows.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the matching rows
	 */
	@Override
	public <T> List<T> dynamicQuery(DynamicQuery dynamicQuery) {
		return socialNetworkPersistence.findWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Performs a dynamic query on the database and returns a range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link es.aragon.base.social_network.sb.model.impl.SocialNetworkModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @return the range of matching rows
	 */
	@Override
	public <T> List<T> dynamicQuery(DynamicQuery dynamicQuery, int start,
		int end) {
		return socialNetworkPersistence.findWithDynamicQuery(dynamicQuery,
			start, end);
	}

	/**
	 * Performs a dynamic query on the database and returns an ordered range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link es.aragon.base.social_network.sb.model.impl.SocialNetworkModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @param orderByComparator the comparator to order the results by (optionally <code>null</code>)
	 * @return the ordered range of matching rows
	 */
	@Override
	public <T> List<T> dynamicQuery(DynamicQuery dynamicQuery, int start,
		int end, OrderByComparator<T> orderByComparator) {
		return socialNetworkPersistence.findWithDynamicQuery(dynamicQuery,
			start, end, orderByComparator);
	}

	/**
	 * Returns the number of rows matching the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the number of rows matching the dynamic query
	 */
	@Override
	public long dynamicQueryCount(DynamicQuery dynamicQuery) {
		return socialNetworkPersistence.countWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Returns the number of rows matching the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @param projection the projection to apply to the query
	 * @return the number of rows matching the dynamic query
	 */
	@Override
	public long dynamicQueryCount(DynamicQuery dynamicQuery,
		Projection projection) {
		return socialNetworkPersistence.countWithDynamicQuery(dynamicQuery,
			projection);
	}

	@Override
	public SocialNetwork fetchSocialNetwork(long socialNetworkId) {
		return socialNetworkPersistence.fetchByPrimaryKey(socialNetworkId);
	}

	/**
	 * Returns the social network matching the UUID and group.
	 *
	 * @param uuid the social network's UUID
	 * @param groupId the primary key of the group
	 * @return the matching social network, or <code>null</code> if a matching social network could not be found
	 */
	@Override
	public SocialNetwork fetchSocialNetworkByUuidAndGroupId(String uuid,
		long groupId) {
		return socialNetworkPersistence.fetchByUUID_G(uuid, groupId);
	}

	/**
	 * Returns the social network with the primary key.
	 *
	 * @param socialNetworkId the primary key of the social network
	 * @return the social network
	 * @throws PortalException if a social network with the primary key could not be found
	 */
	@Override
	public SocialNetwork getSocialNetwork(long socialNetworkId)
		throws PortalException {
		return socialNetworkPersistence.findByPrimaryKey(socialNetworkId);
	}

	@Override
	public ActionableDynamicQuery getActionableDynamicQuery() {
		ActionableDynamicQuery actionableDynamicQuery = new DefaultActionableDynamicQuery();

		actionableDynamicQuery.setBaseLocalService(socialNetworkLocalService);
		actionableDynamicQuery.setClassLoader(getClassLoader());
		actionableDynamicQuery.setModelClass(SocialNetwork.class);

		actionableDynamicQuery.setPrimaryKeyPropertyName("socialNetworkId");

		return actionableDynamicQuery;
	}

	@Override
	public IndexableActionableDynamicQuery getIndexableActionableDynamicQuery() {
		IndexableActionableDynamicQuery indexableActionableDynamicQuery = new IndexableActionableDynamicQuery();

		indexableActionableDynamicQuery.setBaseLocalService(socialNetworkLocalService);
		indexableActionableDynamicQuery.setClassLoader(getClassLoader());
		indexableActionableDynamicQuery.setModelClass(SocialNetwork.class);

		indexableActionableDynamicQuery.setPrimaryKeyPropertyName(
			"socialNetworkId");

		return indexableActionableDynamicQuery;
	}

	protected void initActionableDynamicQuery(
		ActionableDynamicQuery actionableDynamicQuery) {
		actionableDynamicQuery.setBaseLocalService(socialNetworkLocalService);
		actionableDynamicQuery.setClassLoader(getClassLoader());
		actionableDynamicQuery.setModelClass(SocialNetwork.class);

		actionableDynamicQuery.setPrimaryKeyPropertyName("socialNetworkId");
	}

	@Override
	public ExportActionableDynamicQuery getExportActionableDynamicQuery(
		final PortletDataContext portletDataContext) {
		final ExportActionableDynamicQuery exportActionableDynamicQuery = new ExportActionableDynamicQuery() {
				@Override
				public long performCount() throws PortalException {
					ManifestSummary manifestSummary = portletDataContext.getManifestSummary();

					StagedModelType stagedModelType = getStagedModelType();

					long modelAdditionCount = super.performCount();

					manifestSummary.addModelAdditionCount(stagedModelType,
						modelAdditionCount);

					long modelDeletionCount = ExportImportHelperUtil.getModelDeletionCount(portletDataContext,
							stagedModelType);

					manifestSummary.addModelDeletionCount(stagedModelType,
						modelDeletionCount);

					return modelAdditionCount;
				}
			};

		initActionableDynamicQuery(exportActionableDynamicQuery);

		exportActionableDynamicQuery.setAddCriteriaMethod(new ActionableDynamicQuery.AddCriteriaMethod() {
				@Override
				public void addCriteria(DynamicQuery dynamicQuery) {
					portletDataContext.addDateRangeCriteria(dynamicQuery,
						"modifiedDate");
				}
			});

		exportActionableDynamicQuery.setCompanyId(portletDataContext.getCompanyId());

		exportActionableDynamicQuery.setPerformActionMethod(new ActionableDynamicQuery.PerformActionMethod<SocialNetwork>() {
				@Override
				public void performAction(SocialNetwork socialNetwork)
					throws PortalException {
					StagedModelDataHandlerUtil.exportStagedModel(portletDataContext,
						socialNetwork);
				}
			});
		exportActionableDynamicQuery.setStagedModelType(new StagedModelType(
				PortalUtil.getClassNameId(SocialNetwork.class.getName())));

		return exportActionableDynamicQuery;
	}

	/**
	 * @throws PortalException
	 */
	@Override
	public PersistedModel deletePersistedModel(PersistedModel persistedModel)
		throws PortalException {
		return socialNetworkLocalService.deleteSocialNetwork((SocialNetwork)persistedModel);
	}

	@Override
	public PersistedModel getPersistedModel(Serializable primaryKeyObj)
		throws PortalException {
		return socialNetworkPersistence.findByPrimaryKey(primaryKeyObj);
	}

	/**
	 * Returns all the social networks matching the UUID and company.
	 *
	 * @param uuid the UUID of the social networks
	 * @param companyId the primary key of the company
	 * @return the matching social networks, or an empty list if no matches were found
	 */
	@Override
	public List<SocialNetwork> getSocialNetworksByUuidAndCompanyId(
		String uuid, long companyId) {
		return socialNetworkPersistence.findByUuid_C(uuid, companyId);
	}

	/**
	 * Returns a range of social networks matching the UUID and company.
	 *
	 * @param uuid the UUID of the social networks
	 * @param companyId the primary key of the company
	 * @param start the lower bound of the range of social networks
	 * @param end the upper bound of the range of social networks (not inclusive)
	 * @param orderByComparator the comparator to order the results by (optionally <code>null</code>)
	 * @return the range of matching social networks, or an empty list if no matches were found
	 */
	@Override
	public List<SocialNetwork> getSocialNetworksByUuidAndCompanyId(
		String uuid, long companyId, int start, int end,
		OrderByComparator<SocialNetwork> orderByComparator) {
		return socialNetworkPersistence.findByUuid_C(uuid, companyId, start,
			end, orderByComparator);
	}

	/**
	 * Returns the social network matching the UUID and group.
	 *
	 * @param uuid the social network's UUID
	 * @param groupId the primary key of the group
	 * @return the matching social network
	 * @throws PortalException if a matching social network could not be found
	 */
	@Override
	public SocialNetwork getSocialNetworkByUuidAndGroupId(String uuid,
		long groupId) throws PortalException {
		return socialNetworkPersistence.findByUUID_G(uuid, groupId);
	}

	/**
	 * Returns a range of all the social networks.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link es.aragon.base.social_network.sb.model.impl.SocialNetworkModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param start the lower bound of the range of social networks
	 * @param end the upper bound of the range of social networks (not inclusive)
	 * @return the range of social networks
	 */
	@Override
	public List<SocialNetwork> getSocialNetworks(int start, int end) {
		return socialNetworkPersistence.findAll(start, end);
	}

	/**
	 * Returns the number of social networks.
	 *
	 * @return the number of social networks
	 */
	@Override
	public int getSocialNetworksCount() {
		return socialNetworkPersistence.countAll();
	}

	/**
	 * Updates the social network in the database or adds it if it does not yet exist. Also notifies the appropriate model listeners.
	 *
	 * @param socialNetwork the social network
	 * @return the social network that was updated
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public SocialNetwork updateSocialNetwork(SocialNetwork socialNetwork) {
		return socialNetworkPersistence.update(socialNetwork);
	}

	/**
	 * Returns the social network local service.
	 *
	 * @return the social network local service
	 */
	public SocialNetworkLocalService getSocialNetworkLocalService() {
		return socialNetworkLocalService;
	}

	/**
	 * Sets the social network local service.
	 *
	 * @param socialNetworkLocalService the social network local service
	 */
	public void setSocialNetworkLocalService(
		SocialNetworkLocalService socialNetworkLocalService) {
		this.socialNetworkLocalService = socialNetworkLocalService;
	}

	/**
	 * Returns the social network persistence.
	 *
	 * @return the social network persistence
	 */
	public SocialNetworkPersistence getSocialNetworkPersistence() {
		return socialNetworkPersistence;
	}

	/**
	 * Sets the social network persistence.
	 *
	 * @param socialNetworkPersistence the social network persistence
	 */
	public void setSocialNetworkPersistence(
		SocialNetworkPersistence socialNetworkPersistence) {
		this.socialNetworkPersistence = socialNetworkPersistence;
	}

	/**
	 * Returns the counter local service.
	 *
	 * @return the counter local service
	 */
	public com.liferay.counter.kernel.service.CounterLocalService getCounterLocalService() {
		return counterLocalService;
	}

	/**
	 * Sets the counter local service.
	 *
	 * @param counterLocalService the counter local service
	 */
	public void setCounterLocalService(
		com.liferay.counter.kernel.service.CounterLocalService counterLocalService) {
		this.counterLocalService = counterLocalService;
	}

	/**
	 * Returns the class name local service.
	 *
	 * @return the class name local service
	 */
	public com.liferay.portal.kernel.service.ClassNameLocalService getClassNameLocalService() {
		return classNameLocalService;
	}

	/**
	 * Sets the class name local service.
	 *
	 * @param classNameLocalService the class name local service
	 */
	public void setClassNameLocalService(
		com.liferay.portal.kernel.service.ClassNameLocalService classNameLocalService) {
		this.classNameLocalService = classNameLocalService;
	}

	/**
	 * Returns the class name persistence.
	 *
	 * @return the class name persistence
	 */
	public ClassNamePersistence getClassNamePersistence() {
		return classNamePersistence;
	}

	/**
	 * Sets the class name persistence.
	 *
	 * @param classNamePersistence the class name persistence
	 */
	public void setClassNamePersistence(
		ClassNamePersistence classNamePersistence) {
		this.classNamePersistence = classNamePersistence;
	}

	/**
	 * Returns the resource local service.
	 *
	 * @return the resource local service
	 */
	public com.liferay.portal.kernel.service.ResourceLocalService getResourceLocalService() {
		return resourceLocalService;
	}

	/**
	 * Sets the resource local service.
	 *
	 * @param resourceLocalService the resource local service
	 */
	public void setResourceLocalService(
		com.liferay.portal.kernel.service.ResourceLocalService resourceLocalService) {
		this.resourceLocalService = resourceLocalService;
	}

	/**
	 * Returns the user local service.
	 *
	 * @return the user local service
	 */
	public com.liferay.portal.kernel.service.UserLocalService getUserLocalService() {
		return userLocalService;
	}

	/**
	 * Sets the user local service.
	 *
	 * @param userLocalService the user local service
	 */
	public void setUserLocalService(
		com.liferay.portal.kernel.service.UserLocalService userLocalService) {
		this.userLocalService = userLocalService;
	}

	/**
	 * Returns the user persistence.
	 *
	 * @return the user persistence
	 */
	public UserPersistence getUserPersistence() {
		return userPersistence;
	}

	/**
	 * Sets the user persistence.
	 *
	 * @param userPersistence the user persistence
	 */
	public void setUserPersistence(UserPersistence userPersistence) {
		this.userPersistence = userPersistence;
	}

	public void afterPropertiesSet() {
		persistedModelLocalServiceRegistry.register("es.aragon.base.social_network.sb.model.SocialNetwork",
			socialNetworkLocalService);
	}

	public void destroy() {
		persistedModelLocalServiceRegistry.unregister(
			"es.aragon.base.social_network.sb.model.SocialNetwork");
	}

	/**
	 * Returns the OSGi service identifier.
	 *
	 * @return the OSGi service identifier
	 */
	@Override
	public String getOSGiServiceIdentifier() {
		return SocialNetworkLocalService.class.getName();
	}

	protected Class<?> getModelClass() {
		return SocialNetwork.class;
	}

	protected String getModelClassName() {
		return SocialNetwork.class.getName();
	}

	/**
	 * Performs a SQL query.
	 *
	 * @param sql the sql query
	 */
	protected void runSQL(String sql) {
		try {
			DataSource dataSource = socialNetworkPersistence.getDataSource();

			DB db = DBManagerUtil.getDB();

			sql = db.buildSQL(sql);
			sql = PortalUtil.transformSQL(sql);

			SqlUpdate sqlUpdate = SqlUpdateFactoryUtil.getSqlUpdate(dataSource,
					sql);

			sqlUpdate.update();
		}
		catch (Exception e) {
			throw new SystemException(e);
		}
	}

	@BeanReference(type = SocialNetworkLocalService.class)
	protected SocialNetworkLocalService socialNetworkLocalService;
	@BeanReference(type = SocialNetworkPersistence.class)
	protected SocialNetworkPersistence socialNetworkPersistence;
	@ServiceReference(type = com.liferay.counter.kernel.service.CounterLocalService.class)
	protected com.liferay.counter.kernel.service.CounterLocalService counterLocalService;
	@ServiceReference(type = com.liferay.portal.kernel.service.ClassNameLocalService.class)
	protected com.liferay.portal.kernel.service.ClassNameLocalService classNameLocalService;
	@ServiceReference(type = ClassNamePersistence.class)
	protected ClassNamePersistence classNamePersistence;
	@ServiceReference(type = com.liferay.portal.kernel.service.ResourceLocalService.class)
	protected com.liferay.portal.kernel.service.ResourceLocalService resourceLocalService;
	@ServiceReference(type = com.liferay.portal.kernel.service.UserLocalService.class)
	protected com.liferay.portal.kernel.service.UserLocalService userLocalService;
	@ServiceReference(type = UserPersistence.class)
	protected UserPersistence userPersistence;
	@ServiceReference(type = PersistedModelLocalServiceRegistry.class)
	protected PersistedModelLocalServiceRegistry persistedModelLocalServiceRegistry;
}