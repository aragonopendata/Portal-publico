/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package es.aragon.base.semaphore.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;

import es.aragon.base.semaphore.model.Semaphore;
import es.aragon.base.semaphore.model.SemaphoreModel;
import es.aragon.base.semaphore.model.SemaphoreSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the Semaphore service. Represents a row in the &quot;EAB_SEMAPHORE_Semaphore&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link SemaphoreModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link SemaphoreImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see SemaphoreImpl
 * @see Semaphore
 * @see SemaphoreModel
 * @generated
 */
@JSON(strict = true)
@ProviderType
public class SemaphoreModelImpl extends BaseModelImpl<Semaphore>
	implements SemaphoreModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a semaphore model instance should use the {@link Semaphore} interface instead.
	 */
	public static final String TABLE_NAME = "EAB_SEMAPHORE_Semaphore";
	public static final Object[][] TABLE_COLUMNS = {
			{ "uuid_", Types.VARCHAR },
			{ "semaphoreId", Types.BIGINT },
			{ "groupId", Types.BIGINT },
			{ "serviceName", Types.VARCHAR },
			{ "maxUsers", Types.BIGINT },
			{ "currentUsers", Types.BIGINT }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("semaphoreId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("serviceName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("maxUsers", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("currentUsers", Types.BIGINT);
	}

	public static final String TABLE_SQL_CREATE = "create table EAB_SEMAPHORE_Semaphore (uuid_ VARCHAR(75) null,semaphoreId LONG not null primary key,groupId LONG,serviceName VARCHAR(75) null,maxUsers LONG,currentUsers LONG)";
	public static final String TABLE_SQL_DROP = "drop table EAB_SEMAPHORE_Semaphore";
	public static final String ORDER_BY_JPQL = " ORDER BY semaphore.semaphoreId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY EAB_SEMAPHORE_Semaphore.semaphoreId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(es.aragon.base.semaphore.service.util.ServiceProps.get(
				"value.object.entity.cache.enabled.es.aragon.base.semaphore.model.Semaphore"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(es.aragon.base.semaphore.service.util.ServiceProps.get(
				"value.object.finder.cache.enabled.es.aragon.base.semaphore.model.Semaphore"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(es.aragon.base.semaphore.service.util.ServiceProps.get(
				"value.object.column.bitmask.enabled.es.aragon.base.semaphore.model.Semaphore"),
			true);
	public static final long GROUPID_COLUMN_BITMASK = 1L;
	public static final long SERVICENAME_COLUMN_BITMASK = 2L;
	public static final long UUID_COLUMN_BITMASK = 4L;
	public static final long SEMAPHOREID_COLUMN_BITMASK = 8L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static Semaphore toModel(SemaphoreSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		Semaphore model = new SemaphoreImpl();

		model.setUuid(soapModel.getUuid());
		model.setSemaphoreId(soapModel.getSemaphoreId());
		model.setGroupId(soapModel.getGroupId());
		model.setServiceName(soapModel.getServiceName());
		model.setMaxUsers(soapModel.getMaxUsers());
		model.setCurrentUsers(soapModel.getCurrentUsers());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<Semaphore> toModels(SemaphoreSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<Semaphore> models = new ArrayList<Semaphore>(soapModels.length);

		for (SemaphoreSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(es.aragon.base.semaphore.service.util.ServiceProps.get(
				"lock.expiration.time.es.aragon.base.semaphore.model.Semaphore"));

	public SemaphoreModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _semaphoreId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setSemaphoreId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _semaphoreId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Semaphore.class;
	}

	@Override
	public String getModelClassName() {
		return Semaphore.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("uuid", getUuid());
		attributes.put("semaphoreId", getSemaphoreId());
		attributes.put("groupId", getGroupId());
		attributes.put("serviceName", getServiceName());
		attributes.put("maxUsers", getMaxUsers());
		attributes.put("currentUsers", getCurrentUsers());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		String uuid = (String)attributes.get("uuid");

		if (uuid != null) {
			setUuid(uuid);
		}

		Long semaphoreId = (Long)attributes.get("semaphoreId");

		if (semaphoreId != null) {
			setSemaphoreId(semaphoreId);
		}

		Long groupId = (Long)attributes.get("groupId");

		if (groupId != null) {
			setGroupId(groupId);
		}

		String serviceName = (String)attributes.get("serviceName");

		if (serviceName != null) {
			setServiceName(serviceName);
		}

		Long maxUsers = (Long)attributes.get("maxUsers");

		if (maxUsers != null) {
			setMaxUsers(maxUsers);
		}

		Long currentUsers = (Long)attributes.get("currentUsers");

		if (currentUsers != null) {
			setCurrentUsers(currentUsers);
		}
	}

	@JSON
	@Override
	public String getUuid() {
		if (_uuid == null) {
			return "";
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		if (_originalUuid == null) {
			_originalUuid = _uuid;
		}

		_uuid = uuid;
	}

	public String getOriginalUuid() {
		return GetterUtil.getString(_originalUuid);
	}

	@JSON
	@Override
	public long getSemaphoreId() {
		return _semaphoreId;
	}

	@Override
	public void setSemaphoreId(long semaphoreId) {
		_columnBitmask = -1L;

		_semaphoreId = semaphoreId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_columnBitmask |= GROUPID_COLUMN_BITMASK;

		if (!_setOriginalGroupId) {
			_setOriginalGroupId = true;

			_originalGroupId = _groupId;
		}

		_groupId = groupId;
	}

	public long getOriginalGroupId() {
		return _originalGroupId;
	}

	@JSON
	@Override
	public String getServiceName() {
		if (_serviceName == null) {
			return "";
		}
		else {
			return _serviceName;
		}
	}

	@Override
	public void setServiceName(String serviceName) {
		_columnBitmask |= SERVICENAME_COLUMN_BITMASK;

		if (_originalServiceName == null) {
			_originalServiceName = _serviceName;
		}

		_serviceName = serviceName;
	}

	public String getOriginalServiceName() {
		return GetterUtil.getString(_originalServiceName);
	}

	@JSON
	@Override
	public long getMaxUsers() {
		return _maxUsers;
	}

	@Override
	public void setMaxUsers(long maxUsers) {
		_maxUsers = maxUsers;
	}

	@JSON
	@Override
	public long getCurrentUsers() {
		return _currentUsers;
	}

	@Override
	public void setCurrentUsers(long currentUsers) {
		_currentUsers = currentUsers;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			Semaphore.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Semaphore toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (Semaphore)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		SemaphoreImpl semaphoreImpl = new SemaphoreImpl();

		semaphoreImpl.setUuid(getUuid());
		semaphoreImpl.setSemaphoreId(getSemaphoreId());
		semaphoreImpl.setGroupId(getGroupId());
		semaphoreImpl.setServiceName(getServiceName());
		semaphoreImpl.setMaxUsers(getMaxUsers());
		semaphoreImpl.setCurrentUsers(getCurrentUsers());

		semaphoreImpl.resetOriginalValues();

		return semaphoreImpl;
	}

	@Override
	public int compareTo(Semaphore semaphore) {
		int value = 0;

		if (getSemaphoreId() < semaphore.getSemaphoreId()) {
			value = -1;
		}
		else if (getSemaphoreId() > semaphore.getSemaphoreId()) {
			value = 1;
		}
		else {
			value = 0;
		}

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof Semaphore)) {
			return false;
		}

		Semaphore semaphore = (Semaphore)obj;

		long primaryKey = semaphore.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		SemaphoreModelImpl semaphoreModelImpl = this;

		semaphoreModelImpl._originalUuid = semaphoreModelImpl._uuid;

		semaphoreModelImpl._originalGroupId = semaphoreModelImpl._groupId;

		semaphoreModelImpl._setOriginalGroupId = false;

		semaphoreModelImpl._originalServiceName = semaphoreModelImpl._serviceName;

		semaphoreModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<Semaphore> toCacheModel() {
		SemaphoreCacheModel semaphoreCacheModel = new SemaphoreCacheModel();

		semaphoreCacheModel.uuid = getUuid();

		String uuid = semaphoreCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			semaphoreCacheModel.uuid = null;
		}

		semaphoreCacheModel.semaphoreId = getSemaphoreId();

		semaphoreCacheModel.groupId = getGroupId();

		semaphoreCacheModel.serviceName = getServiceName();

		String serviceName = semaphoreCacheModel.serviceName;

		if ((serviceName != null) && (serviceName.length() == 0)) {
			semaphoreCacheModel.serviceName = null;
		}

		semaphoreCacheModel.maxUsers = getMaxUsers();

		semaphoreCacheModel.currentUsers = getCurrentUsers();

		return semaphoreCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(13);

		sb.append("{uuid=");
		sb.append(getUuid());
		sb.append(", semaphoreId=");
		sb.append(getSemaphoreId());
		sb.append(", groupId=");
		sb.append(getGroupId());
		sb.append(", serviceName=");
		sb.append(getServiceName());
		sb.append(", maxUsers=");
		sb.append(getMaxUsers());
		sb.append(", currentUsers=");
		sb.append(getCurrentUsers());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(22);

		sb.append("<model><model-name>");
		sb.append("es.aragon.base.semaphore.model.Semaphore");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>uuid</column-name><column-value><![CDATA[");
		sb.append(getUuid());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>semaphoreId</column-name><column-value><![CDATA[");
		sb.append(getSemaphoreId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>groupId</column-name><column-value><![CDATA[");
		sb.append(getGroupId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>serviceName</column-name><column-value><![CDATA[");
		sb.append(getServiceName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>maxUsers</column-name><column-value><![CDATA[");
		sb.append(getMaxUsers());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>currentUsers</column-name><column-value><![CDATA[");
		sb.append(getCurrentUsers());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = Semaphore.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			Semaphore.class, ModelWrapper.class
		};
	private String _uuid;
	private String _originalUuid;
	private long _semaphoreId;
	private long _groupId;
	private long _originalGroupId;
	private boolean _setOriginalGroupId;
	private String _serviceName;
	private String _originalServiceName;
	private long _maxUsers;
	private long _currentUsers;
	private long _columnBitmask;
	private Semaphore _escapedModel;
}